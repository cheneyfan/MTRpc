// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inspect.proto

#ifndef PROTOBUF_inspect_2eproto__INCLUDED
#define PROTOBUF_inspect_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mtrpc {
namespace inspect {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_inspect_2eproto();
void protobuf_AssignDesc_inspect_2eproto();
void protobuf_ShutdownFile_inspect_2eproto();

class Request;
class Response;

// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes json = 1;
  inline bool has_json() const;
  inline void clear_json();
  static const int kJsonFieldNumber = 1;
  inline const ::std::string& json() const;
  inline void set_json(const ::std::string& value);
  inline void set_json(const char* value);
  inline void set_json(const void* value, size_t size);
  inline ::std::string* mutable_json();
  inline ::std::string* release_json();
  inline void set_allocated_json(::std::string* json);

  // @@protoc_insertion_point(class_scope:mtrpc.inspect.Request)
 private:
  inline void set_has_json();
  inline void clear_has_json();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* json_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inspect_2eproto();
  friend void protobuf_AssignDesc_inspect_2eproto();
  friend void protobuf_ShutdownFile_inspect_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes json = 1;
  inline bool has_json() const;
  inline void clear_json();
  static const int kJsonFieldNumber = 1;
  inline const ::std::string& json() const;
  inline void set_json(const ::std::string& value);
  inline void set_json(const char* value);
  inline void set_json(const void* value, size_t size);
  inline ::std::string* mutable_json();
  inline ::std::string* release_json();
  inline void set_allocated_json(::std::string* json);

  // @@protoc_insertion_point(class_scope:mtrpc.inspect.Response)
 private:
  inline void set_has_json();
  inline void clear_has_json();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* json_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_inspect_2eproto();
  friend void protobuf_AssignDesc_inspect_2eproto();
  friend void protobuf_ShutdownFile_inspect_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================

class Machine_Stub;

class Machine : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Machine() {};
 public:
  virtual ~Machine();

  typedef Machine_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void cpu(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  virtual void mem(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  virtual void net(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  virtual void disk(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Machine);
};

class Machine_Stub : public Machine {
 public:
  Machine_Stub(::google::protobuf::RpcChannel* channel);
  Machine_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Machine_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements Machine ------------------------------------------

  void cpu(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  void mem(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  void net(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  void disk(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Machine_Stub);
};


// -------------------------------------------------------------------

class Process_Stub;

class Process : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Process() {};
 public:
  virtual ~Process();

  typedef Process_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void cpu(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  virtual void mem(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  virtual void net(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  virtual void disk(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  virtual void fd(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Process);
};

class Process_Stub : public Process {
 public:
  Process_Stub(::google::protobuf::RpcChannel* channel);
  Process_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Process_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements Process ------------------------------------------

  void cpu(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  void mem(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  void net(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  void disk(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  void fd(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Process_Stub);
};


// -------------------------------------------------------------------

class Service_Stub;

class Service : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Service() {};
 public:
  virtual ~Service();

  typedef Service_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void version(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  virtual void api(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  virtual void accept(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  virtual void connections(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Service);
};

class Service_Stub : public Service {
 public:
  Service_Stub(::google::protobuf::RpcChannel* channel);
  Service_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Service_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements Service ------------------------------------------

  void version(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  void api(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  void accept(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  void connections(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Service_Stub);
};


// -------------------------------------------------------------------

class Application_Stub;

class Application : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Application() {};
 public:
  virtual ~Application();

  typedef Application_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void interface(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  virtual void requeststatus(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Application);
};

class Application_Stub : public Application {
 public:
  Application_Stub(::google::protobuf::RpcChannel* channel);
  Application_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Application_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements Application ------------------------------------------

  void interface(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
  void requeststatus(::google::protobuf::RpcController* controller,
                       const ::mtrpc::inspect::Request* request,
                       ::mtrpc::inspect::Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Application_Stub);
};


// ===================================================================


// ===================================================================

// Request

// optional bytes json = 1;
inline bool Request::has_json() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_json() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_json() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_json() {
  if (json_ != &::google::protobuf::internal::kEmptyString) {
    json_->clear();
  }
  clear_has_json();
}
inline const ::std::string& Request::json() const {
  return *json_;
}
inline void Request::set_json(const ::std::string& value) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::kEmptyString) {
    json_ = new ::std::string;
  }
  json_->assign(value);
}
inline void Request::set_json(const char* value) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::kEmptyString) {
    json_ = new ::std::string;
  }
  json_->assign(value);
}
inline void Request::set_json(const void* value, size_t size) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::kEmptyString) {
    json_ = new ::std::string;
  }
  json_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_json() {
  set_has_json();
  if (json_ == &::google::protobuf::internal::kEmptyString) {
    json_ = new ::std::string;
  }
  return json_;
}
inline ::std::string* Request::release_json() {
  clear_has_json();
  if (json_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = json_;
    json_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_json(::std::string* json) {
  if (json_ != &::google::protobuf::internal::kEmptyString) {
    delete json_;
  }
  if (json) {
    set_has_json();
    json_ = json;
  } else {
    clear_has_json();
    json_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Response

// optional bytes json = 1;
inline bool Response::has_json() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_json() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_json() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_json() {
  if (json_ != &::google::protobuf::internal::kEmptyString) {
    json_->clear();
  }
  clear_has_json();
}
inline const ::std::string& Response::json() const {
  return *json_;
}
inline void Response::set_json(const ::std::string& value) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::kEmptyString) {
    json_ = new ::std::string;
  }
  json_->assign(value);
}
inline void Response::set_json(const char* value) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::kEmptyString) {
    json_ = new ::std::string;
  }
  json_->assign(value);
}
inline void Response::set_json(const void* value, size_t size) {
  set_has_json();
  if (json_ == &::google::protobuf::internal::kEmptyString) {
    json_ = new ::std::string;
  }
  json_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_json() {
  set_has_json();
  if (json_ == &::google::protobuf::internal::kEmptyString) {
    json_ = new ::std::string;
  }
  return json_;
}
inline ::std::string* Response::release_json() {
  clear_has_json();
  if (json_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = json_;
    json_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Response::set_allocated_json(::std::string* json) {
  if (json_ != &::google::protobuf::internal::kEmptyString) {
    delete json_;
  }
  if (json) {
    set_has_json();
    json_ = json;
  } else {
    clear_has_json();
    json_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace inspect
}  // namespace mtrpc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_inspect_2eproto__INCLUDED
