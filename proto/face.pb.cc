// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: face.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "face.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace youtu {

namespace {

const ::google::protobuf::Descriptor* FaceItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaceImportRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceImportRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaceImportResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceImportResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* FaceImportServer_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_face_2eproto() {
  protobuf_AddDesc_face_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "face.proto");
  GOOGLE_CHECK(file != NULL);
  FaceItem_descriptor_ = file->message_type(0);
  static const int FaceItem_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceItem, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceItem, photoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceItem, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceItem, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceItem, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceItem, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceItem, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceItem, hegiht_),
  };
  FaceItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaceItem_descriptor_,
      FaceItem::default_instance_,
      FaceItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaceItem));
  FaceImportRequest_descriptor_ = file->message_type(1);
  static const int FaceImportRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceImportRequest, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceImportRequest, items_),
  };
  FaceImportRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaceImportRequest_descriptor_,
      FaceImportRequest::default_instance_,
      FaceImportRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceImportRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceImportRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaceImportRequest));
  FaceImportResponse_descriptor_ = file->message_type(2);
  static const int FaceImportResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceImportResponse, faceid_),
  };
  FaceImportResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaceImportResponse_descriptor_,
      FaceImportResponse::default_instance_,
      FaceImportResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceImportResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceImportResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaceImportResponse));
  FaceImportServer_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_face_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaceItem_descriptor_, &FaceItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaceImportRequest_descriptor_, &FaceImportRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaceImportResponse_descriptor_, &FaceImportResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_face_2eproto() {
  delete FaceItem::default_instance_;
  delete FaceItem_reflection_;
  delete FaceImportRequest::default_instance_;
  delete FaceImportRequest_reflection_;
  delete FaceImportResponse::default_instance_;
  delete FaceImportResponse_reflection_;
}

void protobuf_AddDesc_face_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nface.proto\022\005youtu\"v\n\010FaceItem\022\016\n\006facei"
    "d\030\001 \002(\004\022\017\n\007photoid\030\002 \002(\t\022\t\n\001x\030\003 \002(\005\022\t\n\001y"
    "\030\004 \002(\005\022\t\n\001w\030\005 \002(\005\022\t\n\001h\030\006 \002(\005\022\r\n\005width\030\007 "
    "\001(\005\022\016\n\006hegiht\030\010 \001(\005\"@\n\021FaceImportRequest"
    "\022\013\n\003uin\030\001 \002(\r\022\036\n\005items\030\002 \003(\0132\017.youtu.Fac"
    "eItem\"$\n\022FaceImportResponse\022\016\n\006faceid\030\001 "
    "\003(\0042Q\n\020FaceImportServer\022=\n\006Import\022\030.yout"
    "u.FaceImportRequest\032\031.youtu.FaceImportRe"
    "sponseB\003\200\001\001", 331);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "face.proto", &protobuf_RegisterTypes);
  FaceItem::default_instance_ = new FaceItem();
  FaceImportRequest::default_instance_ = new FaceImportRequest();
  FaceImportResponse::default_instance_ = new FaceImportResponse();
  FaceItem::default_instance_->InitAsDefaultInstance();
  FaceImportRequest::default_instance_->InitAsDefaultInstance();
  FaceImportResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_face_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_face_2eproto {
  StaticDescriptorInitializer_face_2eproto() {
    protobuf_AddDesc_face_2eproto();
  }
} static_descriptor_initializer_face_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FaceItem::kFaceidFieldNumber;
const int FaceItem::kPhotoidFieldNumber;
const int FaceItem::kXFieldNumber;
const int FaceItem::kYFieldNumber;
const int FaceItem::kWFieldNumber;
const int FaceItem::kHFieldNumber;
const int FaceItem::kWidthFieldNumber;
const int FaceItem::kHegihtFieldNumber;
#endif  // !_MSC_VER

FaceItem::FaceItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FaceItem::InitAsDefaultInstance() {
}

FaceItem::FaceItem(const FaceItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FaceItem::SharedCtor() {
  _cached_size_ = 0;
  faceid_ = GOOGLE_ULONGLONG(0);
  photoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_ = 0;
  y_ = 0;
  w_ = 0;
  h_ = 0;
  width_ = 0;
  hegiht_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaceItem::~FaceItem() {
  SharedDtor();
}

void FaceItem::SharedDtor() {
  if (photoid_ != &::google::protobuf::internal::kEmptyString) {
    delete photoid_;
  }
  if (this != default_instance_) {
  }
}

void FaceItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceItem_descriptor_;
}

const FaceItem& FaceItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_face_2eproto();
  return *default_instance_;
}

FaceItem* FaceItem::default_instance_ = NULL;

FaceItem* FaceItem::New() const {
  return new FaceItem;
}

void FaceItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faceid_ = GOOGLE_ULONGLONG(0);
    if (has_photoid()) {
      if (photoid_ != &::google::protobuf::internal::kEmptyString) {
        photoid_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
    w_ = 0;
    h_ = 0;
    width_ = 0;
    hegiht_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaceItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 faceid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &faceid_)));
          set_has_faceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_photoid;
        break;
      }

      // required string photoid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_photoid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_photoid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->photoid().data(), this->photoid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // required int32 x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }

      // required int32 y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_w;
        break;
      }

      // required int32 w = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_h;
        break;
      }

      // required int32 h = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_width;
        break;
      }

      // optional int32 width = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hegiht;
        break;
      }

      // optional int32 hegiht = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hegiht:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hegiht_)));
          set_has_hegiht();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FaceItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 faceid = 1;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->faceid(), output);
  }

  // required string photoid = 2;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->photoid().data(), this->photoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->photoid(), output);
  }

  // required int32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }

  // required int32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y(), output);
  }

  // required int32 w = 5;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->w(), output);
  }

  // required int32 h = 6;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->h(), output);
  }

  // optional int32 width = 7;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->width(), output);
  }

  // optional int32 hegiht = 8;
  if (has_hegiht()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hegiht(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FaceItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 faceid = 1;
  if (has_faceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->faceid(), target);
  }

  // required string photoid = 2;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->photoid().data(), this->photoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->photoid(), target);
  }

  // required int32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x(), target);
  }

  // required int32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y(), target);
  }

  // required int32 w = 5;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->w(), target);
  }

  // required int32 h = 6;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->h(), target);
  }

  // optional int32 width = 7;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->width(), target);
  }

  // optional int32 hegiht = 8;
  if (has_hegiht()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hegiht(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FaceItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 faceid = 1;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->faceid());
    }

    // required string photoid = 2;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->photoid());
    }

    // required int32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 w = 5;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // required int32 h = 6;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

    // optional int32 width = 7;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 hegiht = 8;
    if (has_hegiht()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hegiht());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaceItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaceItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaceItem::MergeFrom(const FaceItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_hegiht()) {
      set_hegiht(from.hegiht());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaceItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceItem::CopyFrom(const FaceItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FaceItem::Swap(FaceItem* other) {
  if (other != this) {
    std::swap(faceid_, other->faceid_);
    std::swap(photoid_, other->photoid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(width_, other->width_);
    std::swap(hegiht_, other->hegiht_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaceItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceItem_descriptor_;
  metadata.reflection = FaceItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FaceImportRequest::kUinFieldNumber;
const int FaceImportRequest::kItemsFieldNumber;
#endif  // !_MSC_VER

FaceImportRequest::FaceImportRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FaceImportRequest::InitAsDefaultInstance() {
}

FaceImportRequest::FaceImportRequest(const FaceImportRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FaceImportRequest::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaceImportRequest::~FaceImportRequest() {
  SharedDtor();
}

void FaceImportRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FaceImportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceImportRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceImportRequest_descriptor_;
}

const FaceImportRequest& FaceImportRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_face_2eproto();
  return *default_instance_;
}

FaceImportRequest* FaceImportRequest::default_instance_ = NULL;

FaceImportRequest* FaceImportRequest::New() const {
  return new FaceImportRequest;
}

void FaceImportRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaceImportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .youtu.FaceItem items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FaceImportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // repeated .youtu.FaceItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FaceImportRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // repeated .youtu.FaceItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FaceImportRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

  }
  // repeated .youtu.FaceItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceImportRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaceImportRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaceImportRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaceImportRequest::MergeFrom(const FaceImportRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaceImportRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceImportRequest::CopyFrom(const FaceImportRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceImportRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void FaceImportRequest::Swap(FaceImportRequest* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaceImportRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceImportRequest_descriptor_;
  metadata.reflection = FaceImportRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FaceImportResponse::kFaceidFieldNumber;
#endif  // !_MSC_VER

FaceImportResponse::FaceImportResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FaceImportResponse::InitAsDefaultInstance() {
}

FaceImportResponse::FaceImportResponse(const FaceImportResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FaceImportResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaceImportResponse::~FaceImportResponse() {
  SharedDtor();
}

void FaceImportResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FaceImportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceImportResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceImportResponse_descriptor_;
}

const FaceImportResponse& FaceImportResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_face_2eproto();
  return *default_instance_;
}

FaceImportResponse* FaceImportResponse::default_instance_ = NULL;

FaceImportResponse* FaceImportResponse::New() const {
  return new FaceImportResponse;
}

void FaceImportResponse::Clear() {
  faceid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaceImportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 faceid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_faceid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_faceid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_faceid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FaceImportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 faceid = 1;
  for (int i = 0; i < this->faceid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->faceid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FaceImportResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 faceid = 1;
  for (int i = 0; i < this->faceid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->faceid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FaceImportResponse::ByteSize() const {
  int total_size = 0;

  // repeated uint64 faceid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->faceid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->faceid(i));
    }
    total_size += 1 * this->faceid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceImportResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaceImportResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaceImportResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaceImportResponse::MergeFrom(const FaceImportResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  faceid_.MergeFrom(from.faceid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaceImportResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceImportResponse::CopyFrom(const FaceImportResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceImportResponse::IsInitialized() const {

  return true;
}

void FaceImportResponse::Swap(FaceImportResponse* other) {
  if (other != this) {
    faceid_.Swap(&other->faceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaceImportResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceImportResponse_descriptor_;
  metadata.reflection = FaceImportResponse_reflection_;
  return metadata;
}


// ===================================================================

FaceImportServer::~FaceImportServer() {}

const ::google::protobuf::ServiceDescriptor* FaceImportServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceImportServer_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* FaceImportServer::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceImportServer_descriptor_;
}

void FaceImportServer::Import(::google::protobuf::RpcController* controller,
                         const ::youtu::FaceImportRequest*,
                         ::youtu::FaceImportResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Import() not implemented.");
  done->Run();
}

void FaceImportServer::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), FaceImportServer_descriptor_);
  switch(method->index()) {
    case 0:
      Import(controller,
             ::google::protobuf::down_cast<const ::youtu::FaceImportRequest*>(request),
             ::google::protobuf::down_cast< ::youtu::FaceImportResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& FaceImportServer::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::youtu::FaceImportRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& FaceImportServer::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::youtu::FaceImportResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

FaceImportServer_Stub::FaceImportServer_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FaceImportServer_Stub::FaceImportServer_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
FaceImportServer_Stub::~FaceImportServer_Stub() {
  if (owns_channel_) delete channel_;
}

void FaceImportServer_Stub::Import(::google::protobuf::RpcController* controller,
                              const ::youtu::FaceImportRequest* request,
                              ::youtu::FaceImportResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace youtu

// @@protoc_insertion_point(global_scope)
