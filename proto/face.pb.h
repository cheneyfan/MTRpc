// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: face.proto

#ifndef PROTOBUF_face_2eproto__INCLUDED
#define PROTOBUF_face_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace youtu {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_face_2eproto();
void protobuf_AssignDesc_face_2eproto();
void protobuf_ShutdownFile_face_2eproto();

class FaceItem;
class FaceImportRequest;
class FaceImportResponse;

// ===================================================================

class FaceItem : public ::google::protobuf::Message {
 public:
  FaceItem();
  virtual ~FaceItem();

  FaceItem(const FaceItem& from);

  inline FaceItem& operator=(const FaceItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceItem& default_instance();

  void Swap(FaceItem* other);

  // implements Message ----------------------------------------------

  FaceItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FaceItem& from);
  void MergeFrom(const FaceItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 faceid = 1;
  inline bool has_faceid() const;
  inline void clear_faceid();
  static const int kFaceidFieldNumber = 1;
  inline ::google::protobuf::uint64 faceid() const;
  inline void set_faceid(::google::protobuf::uint64 value);

  // required string photoid = 2;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoidFieldNumber = 2;
  inline const ::std::string& photoid() const;
  inline void set_photoid(const ::std::string& value);
  inline void set_photoid(const char* value);
  inline void set_photoid(const char* value, size_t size);
  inline ::std::string* mutable_photoid();
  inline ::std::string* release_photoid();
  inline void set_allocated_photoid(::std::string* photoid);

  // required int32 x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // required int32 w = 5;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 5;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);

  // required int32 h = 6;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 6;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);

  // optional int32 width = 7;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 7;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 hegiht = 8;
  inline bool has_hegiht() const;
  inline void clear_hegiht();
  static const int kHegihtFieldNumber = 8;
  inline ::google::protobuf::int32 hegiht() const;
  inline void set_hegiht(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:youtu.FaceItem)
 private:
  inline void set_has_faceid();
  inline void clear_has_faceid();
  inline void set_has_photoid();
  inline void clear_has_photoid();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_hegiht();
  inline void clear_has_hegiht();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 faceid_;
  ::std::string* photoid_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 hegiht_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_face_2eproto();
  friend void protobuf_AssignDesc_face_2eproto();
  friend void protobuf_ShutdownFile_face_2eproto();

  void InitAsDefaultInstance();
  static FaceItem* default_instance_;
};
// -------------------------------------------------------------------

class FaceImportRequest : public ::google::protobuf::Message {
 public:
  FaceImportRequest();
  virtual ~FaceImportRequest();

  FaceImportRequest(const FaceImportRequest& from);

  inline FaceImportRequest& operator=(const FaceImportRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceImportRequest& default_instance();

  void Swap(FaceImportRequest* other);

  // implements Message ----------------------------------------------

  FaceImportRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FaceImportRequest& from);
  void MergeFrom(const FaceImportRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // repeated .youtu.FaceItem items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::youtu::FaceItem& items(int index) const;
  inline ::youtu::FaceItem* mutable_items(int index);
  inline ::youtu::FaceItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::youtu::FaceItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::youtu::FaceItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:youtu.FaceImportRequest)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::youtu::FaceItem > items_;
  ::google::protobuf::uint32 uin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_face_2eproto();
  friend void protobuf_AssignDesc_face_2eproto();
  friend void protobuf_ShutdownFile_face_2eproto();

  void InitAsDefaultInstance();
  static FaceImportRequest* default_instance_;
};
// -------------------------------------------------------------------

class FaceImportResponse : public ::google::protobuf::Message {
 public:
  FaceImportResponse();
  virtual ~FaceImportResponse();

  FaceImportResponse(const FaceImportResponse& from);

  inline FaceImportResponse& operator=(const FaceImportResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceImportResponse& default_instance();

  void Swap(FaceImportResponse* other);

  // implements Message ----------------------------------------------

  FaceImportResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FaceImportResponse& from);
  void MergeFrom(const FaceImportResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 faceid = 1;
  inline int faceid_size() const;
  inline void clear_faceid();
  static const int kFaceidFieldNumber = 1;
  inline ::google::protobuf::uint64 faceid(int index) const;
  inline void set_faceid(int index, ::google::protobuf::uint64 value);
  inline void add_faceid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      faceid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_faceid();

  // @@protoc_insertion_point(class_scope:youtu.FaceImportResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > faceid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_face_2eproto();
  friend void protobuf_AssignDesc_face_2eproto();
  friend void protobuf_ShutdownFile_face_2eproto();

  void InitAsDefaultInstance();
  static FaceImportResponse* default_instance_;
};
// ===================================================================

class FaceImportServer_Stub;

class FaceImportServer : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FaceImportServer() {};
 public:
  virtual ~FaceImportServer();

  typedef FaceImportServer_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Import(::google::protobuf::RpcController* controller,
                       const ::youtu::FaceImportRequest* request,
                       ::youtu::FaceImportResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FaceImportServer);
};

class FaceImportServer_Stub : public FaceImportServer {
 public:
  FaceImportServer_Stub(::google::protobuf::RpcChannel* channel);
  FaceImportServer_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~FaceImportServer_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements FaceImportServer ------------------------------------------

  void Import(::google::protobuf::RpcController* controller,
                       const ::youtu::FaceImportRequest* request,
                       ::youtu::FaceImportResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FaceImportServer_Stub);
};


// ===================================================================


// ===================================================================

// FaceItem

// required uint64 faceid = 1;
inline bool FaceItem::has_faceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FaceItem::set_has_faceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FaceItem::clear_has_faceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FaceItem::clear_faceid() {
  faceid_ = GOOGLE_ULONGLONG(0);
  clear_has_faceid();
}
inline ::google::protobuf::uint64 FaceItem::faceid() const {
  return faceid_;
}
inline void FaceItem::set_faceid(::google::protobuf::uint64 value) {
  set_has_faceid();
  faceid_ = value;
}

// required string photoid = 2;
inline bool FaceItem::has_photoid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FaceItem::set_has_photoid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FaceItem::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FaceItem::clear_photoid() {
  if (photoid_ != &::google::protobuf::internal::kEmptyString) {
    photoid_->clear();
  }
  clear_has_photoid();
}
inline const ::std::string& FaceItem::photoid() const {
  return *photoid_;
}
inline void FaceItem::set_photoid(const ::std::string& value) {
  set_has_photoid();
  if (photoid_ == &::google::protobuf::internal::kEmptyString) {
    photoid_ = new ::std::string;
  }
  photoid_->assign(value);
}
inline void FaceItem::set_photoid(const char* value) {
  set_has_photoid();
  if (photoid_ == &::google::protobuf::internal::kEmptyString) {
    photoid_ = new ::std::string;
  }
  photoid_->assign(value);
}
inline void FaceItem::set_photoid(const char* value, size_t size) {
  set_has_photoid();
  if (photoid_ == &::google::protobuf::internal::kEmptyString) {
    photoid_ = new ::std::string;
  }
  photoid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FaceItem::mutable_photoid() {
  set_has_photoid();
  if (photoid_ == &::google::protobuf::internal::kEmptyString) {
    photoid_ = new ::std::string;
  }
  return photoid_;
}
inline ::std::string* FaceItem::release_photoid() {
  clear_has_photoid();
  if (photoid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = photoid_;
    photoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FaceItem::set_allocated_photoid(::std::string* photoid) {
  if (photoid_ != &::google::protobuf::internal::kEmptyString) {
    delete photoid_;
  }
  if (photoid) {
    set_has_photoid();
    photoid_ = photoid;
  } else {
    clear_has_photoid();
    photoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 x = 3;
inline bool FaceItem::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FaceItem::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FaceItem::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FaceItem::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 FaceItem::x() const {
  return x_;
}
inline void FaceItem::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 4;
inline bool FaceItem::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FaceItem::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FaceItem::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FaceItem::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 FaceItem::y() const {
  return y_;
}
inline void FaceItem::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// required int32 w = 5;
inline bool FaceItem::has_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FaceItem::set_has_w() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FaceItem::clear_has_w() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FaceItem::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline ::google::protobuf::int32 FaceItem::w() const {
  return w_;
}
inline void FaceItem::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
}

// required int32 h = 6;
inline bool FaceItem::has_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FaceItem::set_has_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FaceItem::clear_has_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FaceItem::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline ::google::protobuf::int32 FaceItem::h() const {
  return h_;
}
inline void FaceItem::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
}

// optional int32 width = 7;
inline bool FaceItem::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FaceItem::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FaceItem::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FaceItem::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 FaceItem::width() const {
  return width_;
}
inline void FaceItem::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 hegiht = 8;
inline bool FaceItem::has_hegiht() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FaceItem::set_has_hegiht() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FaceItem::clear_has_hegiht() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FaceItem::clear_hegiht() {
  hegiht_ = 0;
  clear_has_hegiht();
}
inline ::google::protobuf::int32 FaceItem::hegiht() const {
  return hegiht_;
}
inline void FaceItem::set_hegiht(::google::protobuf::int32 value) {
  set_has_hegiht();
  hegiht_ = value;
}

// -------------------------------------------------------------------

// FaceImportRequest

// required uint32 uin = 1;
inline bool FaceImportRequest::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FaceImportRequest::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FaceImportRequest::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FaceImportRequest::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 FaceImportRequest::uin() const {
  return uin_;
}
inline void FaceImportRequest::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
}

// repeated .youtu.FaceItem items = 2;
inline int FaceImportRequest::items_size() const {
  return items_.size();
}
inline void FaceImportRequest::clear_items() {
  items_.Clear();
}
inline const ::youtu::FaceItem& FaceImportRequest::items(int index) const {
  return items_.Get(index);
}
inline ::youtu::FaceItem* FaceImportRequest::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::youtu::FaceItem* FaceImportRequest::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::youtu::FaceItem >&
FaceImportRequest::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::youtu::FaceItem >*
FaceImportRequest::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// FaceImportResponse

// repeated uint64 faceid = 1;
inline int FaceImportResponse::faceid_size() const {
  return faceid_.size();
}
inline void FaceImportResponse::clear_faceid() {
  faceid_.Clear();
}
inline ::google::protobuf::uint64 FaceImportResponse::faceid(int index) const {
  return faceid_.Get(index);
}
inline void FaceImportResponse::set_faceid(int index, ::google::protobuf::uint64 value) {
  faceid_.Set(index, value);
}
inline void FaceImportResponse::add_faceid(::google::protobuf::uint64 value) {
  faceid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
FaceImportResponse::faceid() const {
  return faceid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
FaceImportResponse::mutable_faceid() {
  return &faceid_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace youtu

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_face_2eproto__INCLUDED
