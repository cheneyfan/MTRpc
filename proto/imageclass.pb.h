// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imageclass.proto

#ifndef PROTOBUF_imageclass_2eproto__INCLUDED
#define PROTOBUF_imageclass_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace youtu {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_imageclass_2eproto();
void protobuf_AssignDesc_imageclass_2eproto();
void protobuf_ShutdownFile_imageclass_2eproto();

class ClassRequest;
class ClassResult;
class ClassResponse;

// ===================================================================

class ClassRequest : public ::google::protobuf::Message {
 public:
  ClassRequest();
  virtual ~ClassRequest();

  ClassRequest(const ClassRequest& from);

  inline ClassRequest& operator=(const ClassRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassRequest& default_instance();

  void Swap(ClassRequest* other);

  // implements Message ----------------------------------------------

  ClassRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClassRequest& from);
  void MergeFrom(const ClassRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes photoid = 1;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoidFieldNumber = 1;
  inline const ::std::string& photoid() const;
  inline void set_photoid(const ::std::string& value);
  inline void set_photoid(const char* value);
  inline void set_photoid(const void* value, size_t size);
  inline ::std::string* mutable_photoid();
  inline ::std::string* release_photoid();
  inline void set_allocated_photoid(::std::string* photoid);

  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:youtu.ClassRequest)
 private:
  inline void set_has_photoid();
  inline void clear_has_photoid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* photoid_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_imageclass_2eproto();
  friend void protobuf_AssignDesc_imageclass_2eproto();
  friend void protobuf_ShutdownFile_imageclass_2eproto();

  void InitAsDefaultInstance();
  static ClassRequest* default_instance_;
};
// -------------------------------------------------------------------

class ClassResult : public ::google::protobuf::Message {
 public:
  ClassResult();
  virtual ~ClassResult();

  ClassResult(const ClassResult& from);

  inline ClassResult& operator=(const ClassResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassResult& default_instance();

  void Swap(ClassResult* other);

  // implements Message ----------------------------------------------

  ClassResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClassResult& from);
  void MergeFrom(const ClassResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string tags = 1;
  inline bool has_tags() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 1;
  inline const ::std::string& tags() const;
  inline void set_tags(const ::std::string& value);
  inline void set_tags(const char* value);
  inline void set_tags(const char* value, size_t size);
  inline ::std::string* mutable_tags();
  inline ::std::string* release_tags();
  inline void set_allocated_tags(::std::string* tags);

  // required float sim = 2;
  inline bool has_sim() const;
  inline void clear_sim();
  static const int kSimFieldNumber = 2;
  inline float sim() const;
  inline void set_sim(float value);

  // @@protoc_insertion_point(class_scope:youtu.ClassResult)
 private:
  inline void set_has_tags();
  inline void clear_has_tags();
  inline void set_has_sim();
  inline void clear_has_sim();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tags_;
  float sim_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_imageclass_2eproto();
  friend void protobuf_AssignDesc_imageclass_2eproto();
  friend void protobuf_ShutdownFile_imageclass_2eproto();

  void InitAsDefaultInstance();
  static ClassResult* default_instance_;
};
// -------------------------------------------------------------------

class ClassResponse : public ::google::protobuf::Message {
 public:
  ClassResponse();
  virtual ~ClassResponse();

  ClassResponse(const ClassResponse& from);

  inline ClassResponse& operator=(const ClassResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassResponse& default_instance();

  void Swap(ClassResponse* other);

  // implements Message ----------------------------------------------

  ClassResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClassResponse& from);
  void MergeFrom(const ClassResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .youtu.ClassResult resultArr = 1;
  inline int resultarr_size() const;
  inline void clear_resultarr();
  static const int kResultArrFieldNumber = 1;
  inline const ::youtu::ClassResult& resultarr(int index) const;
  inline ::youtu::ClassResult* mutable_resultarr(int index);
  inline ::youtu::ClassResult* add_resultarr();
  inline const ::google::protobuf::RepeatedPtrField< ::youtu::ClassResult >&
      resultarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::youtu::ClassResult >*
      mutable_resultarr();

  // repeated string similarUrl = 2;
  inline int similarurl_size() const;
  inline void clear_similarurl();
  static const int kSimilarUrlFieldNumber = 2;
  inline const ::std::string& similarurl(int index) const;
  inline ::std::string* mutable_similarurl(int index);
  inline void set_similarurl(int index, const ::std::string& value);
  inline void set_similarurl(int index, const char* value);
  inline void set_similarurl(int index, const char* value, size_t size);
  inline ::std::string* add_similarurl();
  inline void add_similarurl(const ::std::string& value);
  inline void add_similarurl(const char* value);
  inline void add_similarurl(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& similarurl() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_similarurl();

  // optional float computeTime = 3;
  inline bool has_computetime() const;
  inline void clear_computetime();
  static const int kComputeTimeFieldNumber = 3;
  inline float computetime() const;
  inline void set_computetime(float value);

  // @@protoc_insertion_point(class_scope:youtu.ClassResponse)
 private:
  inline void set_has_computetime();
  inline void clear_has_computetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::youtu::ClassResult > resultarr_;
  ::google::protobuf::RepeatedPtrField< ::std::string> similarurl_;
  float computetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_imageclass_2eproto();
  friend void protobuf_AssignDesc_imageclass_2eproto();
  friend void protobuf_ShutdownFile_imageclass_2eproto();

  void InitAsDefaultInstance();
  static ClassResponse* default_instance_;
};
// ===================================================================

class ImageClass_Stub;

class ImageClass : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ImageClass() {};
 public:
  virtual ~ImageClass();

  typedef ImageClass_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void classify(::google::protobuf::RpcController* controller,
                       const ::youtu::ClassRequest* request,
                       ::youtu::ClassResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ImageClass);
};

class ImageClass_Stub : public ImageClass {
 public:
  ImageClass_Stub(::google::protobuf::RpcChannel* channel);
  ImageClass_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ImageClass_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ImageClass ------------------------------------------

  void classify(::google::protobuf::RpcController* controller,
                       const ::youtu::ClassRequest* request,
                       ::youtu::ClassResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ImageClass_Stub);
};


// ===================================================================


// ===================================================================

// ClassRequest

// required bytes photoid = 1;
inline bool ClassRequest::has_photoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClassRequest::set_has_photoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClassRequest::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClassRequest::clear_photoid() {
  if (photoid_ != &::google::protobuf::internal::kEmptyString) {
    photoid_->clear();
  }
  clear_has_photoid();
}
inline const ::std::string& ClassRequest::photoid() const {
  return *photoid_;
}
inline void ClassRequest::set_photoid(const ::std::string& value) {
  set_has_photoid();
  if (photoid_ == &::google::protobuf::internal::kEmptyString) {
    photoid_ = new ::std::string;
  }
  photoid_->assign(value);
}
inline void ClassRequest::set_photoid(const char* value) {
  set_has_photoid();
  if (photoid_ == &::google::protobuf::internal::kEmptyString) {
    photoid_ = new ::std::string;
  }
  photoid_->assign(value);
}
inline void ClassRequest::set_photoid(const void* value, size_t size) {
  set_has_photoid();
  if (photoid_ == &::google::protobuf::internal::kEmptyString) {
    photoid_ = new ::std::string;
  }
  photoid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClassRequest::mutable_photoid() {
  set_has_photoid();
  if (photoid_ == &::google::protobuf::internal::kEmptyString) {
    photoid_ = new ::std::string;
  }
  return photoid_;
}
inline ::std::string* ClassRequest::release_photoid() {
  clear_has_photoid();
  if (photoid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = photoid_;
    photoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClassRequest::set_allocated_photoid(::std::string* photoid) {
  if (photoid_ != &::google::protobuf::internal::kEmptyString) {
    delete photoid_;
  }
  if (photoid) {
    set_has_photoid();
    photoid_ = photoid;
  } else {
    clear_has_photoid();
    photoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes data = 2;
inline bool ClassRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClassRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClassRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClassRequest::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ClassRequest::data() const {
  return *data_;
}
inline void ClassRequest::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ClassRequest::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ClassRequest::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClassRequest::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* ClassRequest::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClassRequest::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ClassResult

// required string tags = 1;
inline bool ClassResult::has_tags() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClassResult::set_has_tags() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClassResult::clear_has_tags() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClassResult::clear_tags() {
  if (tags_ != &::google::protobuf::internal::kEmptyString) {
    tags_->clear();
  }
  clear_has_tags();
}
inline const ::std::string& ClassResult::tags() const {
  return *tags_;
}
inline void ClassResult::set_tags(const ::std::string& value) {
  set_has_tags();
  if (tags_ == &::google::protobuf::internal::kEmptyString) {
    tags_ = new ::std::string;
  }
  tags_->assign(value);
}
inline void ClassResult::set_tags(const char* value) {
  set_has_tags();
  if (tags_ == &::google::protobuf::internal::kEmptyString) {
    tags_ = new ::std::string;
  }
  tags_->assign(value);
}
inline void ClassResult::set_tags(const char* value, size_t size) {
  set_has_tags();
  if (tags_ == &::google::protobuf::internal::kEmptyString) {
    tags_ = new ::std::string;
  }
  tags_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClassResult::mutable_tags() {
  set_has_tags();
  if (tags_ == &::google::protobuf::internal::kEmptyString) {
    tags_ = new ::std::string;
  }
  return tags_;
}
inline ::std::string* ClassResult::release_tags() {
  clear_has_tags();
  if (tags_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tags_;
    tags_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClassResult::set_allocated_tags(::std::string* tags) {
  if (tags_ != &::google::protobuf::internal::kEmptyString) {
    delete tags_;
  }
  if (tags) {
    set_has_tags();
    tags_ = tags;
  } else {
    clear_has_tags();
    tags_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float sim = 2;
inline bool ClassResult::has_sim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClassResult::set_has_sim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClassResult::clear_has_sim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClassResult::clear_sim() {
  sim_ = 0;
  clear_has_sim();
}
inline float ClassResult::sim() const {
  return sim_;
}
inline void ClassResult::set_sim(float value) {
  set_has_sim();
  sim_ = value;
}

// -------------------------------------------------------------------

// ClassResponse

// repeated .youtu.ClassResult resultArr = 1;
inline int ClassResponse::resultarr_size() const {
  return resultarr_.size();
}
inline void ClassResponse::clear_resultarr() {
  resultarr_.Clear();
}
inline const ::youtu::ClassResult& ClassResponse::resultarr(int index) const {
  return resultarr_.Get(index);
}
inline ::youtu::ClassResult* ClassResponse::mutable_resultarr(int index) {
  return resultarr_.Mutable(index);
}
inline ::youtu::ClassResult* ClassResponse::add_resultarr() {
  return resultarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::youtu::ClassResult >&
ClassResponse::resultarr() const {
  return resultarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::youtu::ClassResult >*
ClassResponse::mutable_resultarr() {
  return &resultarr_;
}

// repeated string similarUrl = 2;
inline int ClassResponse::similarurl_size() const {
  return similarurl_.size();
}
inline void ClassResponse::clear_similarurl() {
  similarurl_.Clear();
}
inline const ::std::string& ClassResponse::similarurl(int index) const {
  return similarurl_.Get(index);
}
inline ::std::string* ClassResponse::mutable_similarurl(int index) {
  return similarurl_.Mutable(index);
}
inline void ClassResponse::set_similarurl(int index, const ::std::string& value) {
  similarurl_.Mutable(index)->assign(value);
}
inline void ClassResponse::set_similarurl(int index, const char* value) {
  similarurl_.Mutable(index)->assign(value);
}
inline void ClassResponse::set_similarurl(int index, const char* value, size_t size) {
  similarurl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClassResponse::add_similarurl() {
  return similarurl_.Add();
}
inline void ClassResponse::add_similarurl(const ::std::string& value) {
  similarurl_.Add()->assign(value);
}
inline void ClassResponse::add_similarurl(const char* value) {
  similarurl_.Add()->assign(value);
}
inline void ClassResponse::add_similarurl(const char* value, size_t size) {
  similarurl_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ClassResponse::similarurl() const {
  return similarurl_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ClassResponse::mutable_similarurl() {
  return &similarurl_;
}

// optional float computeTime = 3;
inline bool ClassResponse::has_computetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClassResponse::set_has_computetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClassResponse::clear_has_computetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClassResponse::clear_computetime() {
  computetime_ = 0;
  clear_has_computetime();
}
inline float ClassResponse::computetime() const {
  return computetime_;
}
inline void ClassResponse::set_computetime(float value) {
  set_has_computetime();
  computetime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace youtu

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_imageclass_2eproto__INCLUDED
