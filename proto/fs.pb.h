// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fs.proto

#ifndef PROTOBUF_fs_2eproto__INCLUDED
#define PROTOBUF_fs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_fs_2eproto();
void protobuf_AssignDesc_fs_2eproto();
void protobuf_ShutdownFile_fs_2eproto();

class BSRequest;
class BSResponse;

// ===================================================================

class BSRequest : public ::google::protobuf::Message {
 public:
  BSRequest();
  virtual ~BSRequest();

  BSRequest(const BSRequest& from);

  inline BSRequest& operator=(const BSRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BSRequest& default_instance();

  void Swap(BSRequest* other);

  // implements Message ----------------------------------------------

  BSRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BSRequest& from);
  void MergeFrom(const BSRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes features = 1;
  inline bool has_features() const;
  inline void clear_features();
  static const int kFeaturesFieldNumber = 1;
  inline const ::std::string& features() const;
  inline void set_features(const ::std::string& value);
  inline void set_features(const char* value);
  inline void set_features(const void* value, size_t size);
  inline ::std::string* mutable_features();
  inline ::std::string* release_features();
  inline void set_allocated_features(::std::string* features);

  // @@protoc_insertion_point(class_scope:BSRequest)
 private:
  inline void set_has_features();
  inline void clear_has_features();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* features_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_fs_2eproto();
  friend void protobuf_AssignDesc_fs_2eproto();
  friend void protobuf_ShutdownFile_fs_2eproto();

  void InitAsDefaultInstance();
  static BSRequest* default_instance_;
};
// -------------------------------------------------------------------

class BSResponse : public ::google::protobuf::Message {
 public:
  BSResponse();
  virtual ~BSResponse();

  BSResponse(const BSResponse& from);

  inline BSResponse& operator=(const BSResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BSResponse& default_instance();

  void Swap(BSResponse* other);

  // implements Message ----------------------------------------------

  BSResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BSResponse& from);
  void MergeFrom(const BSResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 faceid = 1;
  inline int faceid_size() const;
  inline void clear_faceid();
  static const int kFaceidFieldNumber = 1;
  inline ::google::protobuf::uint64 faceid(int index) const;
  inline void set_faceid(int index, ::google::protobuf::uint64 value);
  inline void add_faceid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      faceid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_faceid();

  // repeated uint32 owner = 2;
  inline int owner_size() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 2;
  inline ::google::protobuf::uint32 owner(int index) const;
  inline void set_owner(int index, ::google::protobuf::uint32 value);
  inline void add_owner(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      owner() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_owner();

  // @@protoc_insertion_point(class_scope:BSResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > faceid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > owner_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fs_2eproto();
  friend void protobuf_AssignDesc_fs_2eproto();
  friend void protobuf_ShutdownFile_fs_2eproto();

  void InitAsDefaultInstance();
  static BSResponse* default_instance_;
};
// ===================================================================

class SearchService_Stub;

class SearchService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SearchService() {};
 public:
  virtual ~SearchService();

  typedef SearchService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Search(::google::protobuf::RpcController* controller,
                       const ::BSRequest* request,
                       ::BSResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SearchService);
};

class SearchService_Stub : public SearchService {
 public:
  SearchService_Stub(::google::protobuf::RpcChannel* channel);
  SearchService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~SearchService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements SearchService ------------------------------------------

  void Search(::google::protobuf::RpcController* controller,
                       const ::BSRequest* request,
                       ::BSResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SearchService_Stub);
};


// ===================================================================


// ===================================================================

// BSRequest

// required bytes features = 1;
inline bool BSRequest::has_features() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BSRequest::set_has_features() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BSRequest::clear_has_features() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BSRequest::clear_features() {
  if (features_ != &::google::protobuf::internal::kEmptyString) {
    features_->clear();
  }
  clear_has_features();
}
inline const ::std::string& BSRequest::features() const {
  return *features_;
}
inline void BSRequest::set_features(const ::std::string& value) {
  set_has_features();
  if (features_ == &::google::protobuf::internal::kEmptyString) {
    features_ = new ::std::string;
  }
  features_->assign(value);
}
inline void BSRequest::set_features(const char* value) {
  set_has_features();
  if (features_ == &::google::protobuf::internal::kEmptyString) {
    features_ = new ::std::string;
  }
  features_->assign(value);
}
inline void BSRequest::set_features(const void* value, size_t size) {
  set_has_features();
  if (features_ == &::google::protobuf::internal::kEmptyString) {
    features_ = new ::std::string;
  }
  features_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BSRequest::mutable_features() {
  set_has_features();
  if (features_ == &::google::protobuf::internal::kEmptyString) {
    features_ = new ::std::string;
  }
  return features_;
}
inline ::std::string* BSRequest::release_features() {
  clear_has_features();
  if (features_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = features_;
    features_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BSRequest::set_allocated_features(::std::string* features) {
  if (features_ != &::google::protobuf::internal::kEmptyString) {
    delete features_;
  }
  if (features) {
    set_has_features();
    features_ = features;
  } else {
    clear_has_features();
    features_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BSResponse

// repeated uint64 faceid = 1;
inline int BSResponse::faceid_size() const {
  return faceid_.size();
}
inline void BSResponse::clear_faceid() {
  faceid_.Clear();
}
inline ::google::protobuf::uint64 BSResponse::faceid(int index) const {
  return faceid_.Get(index);
}
inline void BSResponse::set_faceid(int index, ::google::protobuf::uint64 value) {
  faceid_.Set(index, value);
}
inline void BSResponse::add_faceid(::google::protobuf::uint64 value) {
  faceid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BSResponse::faceid() const {
  return faceid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BSResponse::mutable_faceid() {
  return &faceid_;
}

// repeated uint32 owner = 2;
inline int BSResponse::owner_size() const {
  return owner_.size();
}
inline void BSResponse::clear_owner() {
  owner_.Clear();
}
inline ::google::protobuf::uint32 BSResponse::owner(int index) const {
  return owner_.Get(index);
}
inline void BSResponse::set_owner(int index, ::google::protobuf::uint32 value) {
  owner_.Set(index, value);
}
inline void BSResponse::add_owner(::google::protobuf::uint32 value) {
  owner_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BSResponse::owner() const {
  return owner_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BSResponse::mutable_owner() {
  return &owner_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fs_2eproto__INCLUDED
