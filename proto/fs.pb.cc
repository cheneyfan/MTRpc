// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BSRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BSRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BSResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BSResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* SearchService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_fs_2eproto() {
  protobuf_AddDesc_fs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fs.proto");
  GOOGLE_CHECK(file != NULL);
  BSRequest_descriptor_ = file->message_type(0);
  static const int BSRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BSRequest, features_),
  };
  BSRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BSRequest_descriptor_,
      BSRequest::default_instance_,
      BSRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BSRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BSRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BSRequest));
  BSResponse_descriptor_ = file->message_type(1);
  static const int BSResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BSResponse, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BSResponse, owner_),
  };
  BSResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BSResponse_descriptor_,
      BSResponse::default_instance_,
      BSResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BSResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BSResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BSResponse));
  SearchService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BSRequest_descriptor_, &BSRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BSResponse_descriptor_, &BSResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fs_2eproto() {
  delete BSRequest::default_instance_;
  delete BSRequest_reflection_;
  delete BSResponse::default_instance_;
  delete BSResponse_reflection_;
}

void protobuf_AddDesc_fs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010fs.proto\"\035\n\tBSRequest\022\020\n\010features\030\001 \002("
    "\014\"+\n\nBSResponse\022\016\n\006faceid\030\001 \003(\004\022\r\n\005owner"
    "\030\002 \003(\r22\n\rSearchService\022!\n\006Search\022\n.BSRe"
    "quest\032\013.BSResponseB\003\200\001\001", 143);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fs.proto", &protobuf_RegisterTypes);
  BSRequest::default_instance_ = new BSRequest();
  BSResponse::default_instance_ = new BSResponse();
  BSRequest::default_instance_->InitAsDefaultInstance();
  BSResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fs_2eproto {
  StaticDescriptorInitializer_fs_2eproto() {
    protobuf_AddDesc_fs_2eproto();
  }
} static_descriptor_initializer_fs_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BSRequest::kFeaturesFieldNumber;
#endif  // !_MSC_VER

BSRequest::BSRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BSRequest::InitAsDefaultInstance() {
}

BSRequest::BSRequest(const BSRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BSRequest::SharedCtor() {
  _cached_size_ = 0;
  features_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BSRequest::~BSRequest() {
  SharedDtor();
}

void BSRequest::SharedDtor() {
  if (features_ != &::google::protobuf::internal::kEmptyString) {
    delete features_;
  }
  if (this != default_instance_) {
  }
}

void BSRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BSRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BSRequest_descriptor_;
}

const BSRequest& BSRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fs_2eproto();
  return *default_instance_;
}

BSRequest* BSRequest::default_instance_ = NULL;

BSRequest* BSRequest::New() const {
  return new BSRequest;
}

void BSRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_features()) {
      if (features_ != &::google::protobuf::internal::kEmptyString) {
        features_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BSRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes features = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_features()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BSRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes features = 1;
  if (has_features()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->features(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BSRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes features = 1;
  if (has_features()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->features(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BSRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes features = 1;
    if (has_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->features());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BSRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BSRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BSRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BSRequest::MergeFrom(const BSRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_features()) {
      set_features(from.features());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BSRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BSRequest::CopyFrom(const BSRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BSRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BSRequest::Swap(BSRequest* other) {
  if (other != this) {
    std::swap(features_, other->features_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BSRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BSRequest_descriptor_;
  metadata.reflection = BSRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BSResponse::kFaceidFieldNumber;
const int BSResponse::kOwnerFieldNumber;
#endif  // !_MSC_VER

BSResponse::BSResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BSResponse::InitAsDefaultInstance() {
}

BSResponse::BSResponse(const BSResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BSResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BSResponse::~BSResponse() {
  SharedDtor();
}

void BSResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BSResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BSResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BSResponse_descriptor_;
}

const BSResponse& BSResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fs_2eproto();
  return *default_instance_;
}

BSResponse* BSResponse::default_instance_ = NULL;

BSResponse* BSResponse::New() const {
  return new BSResponse;
}

void BSResponse::Clear() {
  faceid_.Clear();
  owner_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BSResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 faceid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_faceid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_faceid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_faceid;
        if (input->ExpectTag(16)) goto parse_owner;
        break;
      }

      // repeated uint32 owner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_owner())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_owner())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_owner;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BSResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 faceid = 1;
  for (int i = 0; i < this->faceid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->faceid(i), output);
  }

  // repeated uint32 owner = 2;
  for (int i = 0; i < this->owner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->owner(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BSResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 faceid = 1;
  for (int i = 0; i < this->faceid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->faceid(i), target);
  }

  // repeated uint32 owner = 2;
  for (int i = 0; i < this->owner_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->owner(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BSResponse::ByteSize() const {
  int total_size = 0;

  // repeated uint64 faceid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->faceid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->faceid(i));
    }
    total_size += 1 * this->faceid_size() + data_size;
  }

  // repeated uint32 owner = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->owner_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->owner(i));
    }
    total_size += 1 * this->owner_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BSResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BSResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BSResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BSResponse::MergeFrom(const BSResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  faceid_.MergeFrom(from.faceid_);
  owner_.MergeFrom(from.owner_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BSResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BSResponse::CopyFrom(const BSResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BSResponse::IsInitialized() const {

  return true;
}

void BSResponse::Swap(BSResponse* other) {
  if (other != this) {
    faceid_.Swap(&other->faceid_);
    owner_.Swap(&other->owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BSResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BSResponse_descriptor_;
  metadata.reflection = BSResponse_reflection_;
  return metadata;
}


// ===================================================================

SearchService::~SearchService() {}

const ::google::protobuf::ServiceDescriptor* SearchService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* SearchService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchService_descriptor_;
}

void SearchService::Search(::google::protobuf::RpcController* controller,
                         const ::BSRequest*,
                         ::BSResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Search() not implemented.");
  done->Run();
}

void SearchService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), SearchService_descriptor_);
  switch(method->index()) {
    case 0:
      Search(controller,
             ::google::protobuf::down_cast<const ::BSRequest*>(request),
             ::google::protobuf::down_cast< ::BSResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SearchService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::BSRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& SearchService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::BSResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

SearchService_Stub::SearchService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SearchService_Stub::SearchService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
SearchService_Stub::~SearchService_Stub() {
  if (owns_channel_) delete channel_;
}

void SearchService_Stub::Search(::google::protobuf::RpcController* controller,
                              const ::BSRequest* request,
                              ::BSResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
