// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: builtin_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "builtin_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MTRpc {

namespace {

const ::google::protobuf::Descriptor* HealthRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HealthRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HealthResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HealthResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerOptionsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerOptionsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerOptionsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerOptionsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateOptionsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateOptionsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateOptionsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateOptionsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListServiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListServiceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListServiceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListServiceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MethodStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MethodStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* BuiltinService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_builtin_5fservice_2eproto() {
  protobuf_AddDesc_builtin_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "builtin_service.proto");
  GOOGLE_CHECK(file != NULL);
  HealthRequest_descriptor_ = file->message_type(0);
  static const int HealthRequest_offsets_[1] = {
  };
  HealthRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HealthRequest_descriptor_,
      HealthRequest::default_instance_,
      HealthRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HealthRequest));
  HealthResponse_descriptor_ = file->message_type(1);
  static const int HealthResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthResponse, health_),
  };
  HealthResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HealthResponse_descriptor_,
      HealthResponse::default_instance_,
      HealthResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HealthResponse));
  ServerOptions_descriptor_ = file->message_type(2);
  static const int ServerOptions_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOptions, work_thread_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOptions, keep_alive_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOptions, max_pending_buffer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOptions, max_throughput_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOptions, max_throughput_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOptions, disable_builtin_services_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOptions, disable_list_service_),
  };
  ServerOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerOptions_descriptor_,
      ServerOptions::default_instance_,
      ServerOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerOptions));
  ServerOptionsRequest_descriptor_ = file->message_type(3);
  static const int ServerOptionsRequest_offsets_[1] = {
  };
  ServerOptionsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerOptionsRequest_descriptor_,
      ServerOptionsRequest::default_instance_,
      ServerOptionsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOptionsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOptionsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerOptionsRequest));
  ServerOptionsResponse_descriptor_ = file->message_type(4);
  static const int ServerOptionsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOptionsResponse, options_),
  };
  ServerOptionsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerOptionsResponse_descriptor_,
      ServerOptionsResponse::default_instance_,
      ServerOptionsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOptionsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOptionsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerOptionsResponse));
  UpdateOptionsRequest_descriptor_ = file->message_type(5);
  static const int UpdateOptionsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateOptionsRequest, options_),
  };
  UpdateOptionsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateOptionsRequest_descriptor_,
      UpdateOptionsRequest::default_instance_,
      UpdateOptionsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateOptionsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateOptionsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateOptionsRequest));
  UpdateOptionsResponse_descriptor_ = file->message_type(6);
  static const int UpdateOptionsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateOptionsResponse, options_),
  };
  UpdateOptionsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateOptionsResponse_descriptor_,
      UpdateOptionsResponse::default_instance_,
      UpdateOptionsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateOptionsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateOptionsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateOptionsResponse));
  ServerStatusRequest_descriptor_ = file->message_type(7);
  static const int ServerStatusRequest_offsets_[1] = {
  };
  ServerStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStatusRequest_descriptor_,
      ServerStatusRequest::default_instance_,
      ServerStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStatusRequest));
  ServerStatusResponse_descriptor_ = file->message_type(8);
  static const int ServerStatusResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatusResponse, is_listening_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatusResponse, connection_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatusResponse, service_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatusResponse, pending_message_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatusResponse, pending_buffer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatusResponse, pending_data_size_),
  };
  ServerStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStatusResponse_descriptor_,
      ServerStatusResponse::default_instance_,
      ServerStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStatusResponse));
  ListServiceRequest_descriptor_ = file->message_type(9);
  static const int ListServiceRequest_offsets_[1] = {
  };
  ListServiceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListServiceRequest_descriptor_,
      ListServiceRequest::default_instance_,
      ListServiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListServiceRequest));
  ListServiceResponse_descriptor_ = file->message_type(10);
  static const int ListServiceResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceResponse, services_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceResponse, files_),
  };
  ListServiceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListServiceResponse_descriptor_,
      ListServiceResponse::default_instance_,
      ListServiceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListServiceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListServiceResponse));
  MethodStat_descriptor_ = file->message_type(11);
  static const int MethodStat_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStat, method_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStat, succeed_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStat, succeed_avg_time_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStat, succeed_max_time_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStat, failed_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStat, failed_avg_time_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStat, failed_max_time_us_),
  };
  MethodStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MethodStat_descriptor_,
      MethodStat::default_instance_,
      MethodStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MethodStat));
  ServiceStat_descriptor_ = file->message_type(12);
  static const int ServiceStat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStat, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStat, period_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStat, succeed_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStat, failed_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStat, method_stats_),
  };
  ServiceStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceStat_descriptor_,
      ServiceStat::default_instance_,
      ServiceStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceStat));
  StatRequest_descriptor_ = file->message_type(13);
  static const int StatRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatRequest, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatRequest, period_seconds_),
  };
  StatRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatRequest_descriptor_,
      StatRequest::default_instance_,
      StatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatRequest));
  StatResponse_descriptor_ = file->message_type(14);
  static const int StatResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatResponse, service_stats_),
  };
  StatResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatResponse_descriptor_,
      StatResponse::default_instance_,
      StatResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatResponse));
  BuiltinService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_builtin_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HealthRequest_descriptor_, &HealthRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HealthResponse_descriptor_, &HealthResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerOptions_descriptor_, &ServerOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerOptionsRequest_descriptor_, &ServerOptionsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerOptionsResponse_descriptor_, &ServerOptionsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateOptionsRequest_descriptor_, &UpdateOptionsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateOptionsResponse_descriptor_, &UpdateOptionsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStatusRequest_descriptor_, &ServerStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStatusResponse_descriptor_, &ServerStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListServiceRequest_descriptor_, &ListServiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListServiceResponse_descriptor_, &ListServiceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MethodStat_descriptor_, &MethodStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceStat_descriptor_, &ServiceStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatRequest_descriptor_, &StatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatResponse_descriptor_, &StatResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_builtin_5fservice_2eproto() {
  delete HealthRequest::default_instance_;
  delete HealthRequest_reflection_;
  delete HealthResponse::default_instance_;
  delete HealthResponse_reflection_;
  delete ServerOptions::default_instance_;
  delete ServerOptions_reflection_;
  delete ServerOptionsRequest::default_instance_;
  delete ServerOptionsRequest_reflection_;
  delete ServerOptionsResponse::default_instance_;
  delete ServerOptionsResponse_reflection_;
  delete UpdateOptionsRequest::default_instance_;
  delete UpdateOptionsRequest_reflection_;
  delete UpdateOptionsResponse::default_instance_;
  delete UpdateOptionsResponse_reflection_;
  delete ServerStatusRequest::default_instance_;
  delete ServerStatusRequest_reflection_;
  delete ServerStatusResponse::default_instance_;
  delete ServerStatusResponse_reflection_;
  delete ListServiceRequest::default_instance_;
  delete ListServiceRequest_reflection_;
  delete ListServiceResponse::default_instance_;
  delete ListServiceResponse_reflection_;
  delete MethodStat::default_instance_;
  delete MethodStat_reflection_;
  delete ServiceStat::default_instance_;
  delete ServiceStat_reflection_;
  delete StatRequest::default_instance_;
  delete StatRequest_reflection_;
  delete StatRequest::_default_service_name_;
  delete StatResponse::default_instance_;
  delete StatResponse_reflection_;
}

void protobuf_AddDesc_builtin_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::MTRpc::protobuf_AddDesc_rpc_5foption_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025builtin_service.proto\022\005MTRpc\032 google/p"
    "rotobuf/descriptor.proto\032\020rpc_option.pro"
    "to\"\017\n\rHealthRequest\" \n\016HealthResponse\022\016\n"
    "\006health\030\001 \001(\t\"\331\001\n\rServerOptions\022\027\n\017work_"
    "thread_num\030\001 \001(\003\022\027\n\017keep_alive_time\030\002 \001("
    "\003\022\037\n\027max_pending_buffer_size\030\003 \001(\003\022\031\n\021ma"
    "x_throughput_in\030\004 \001(\003\022\032\n\022max_throughput_"
    "out\030\005 \001(\003\022 \n\030disable_builtin_services\030\006 "
    "\001(\010\022\034\n\024disable_list_service\030\007 \001(\010\"\026\n\024Ser"
    "verOptionsRequest\">\n\025ServerOptionsRespon"
    "se\022%\n\007options\030\001 \001(\0132\024.MTRpc.ServerOption"
    "s\"=\n\024UpdateOptionsRequest\022%\n\007options\030\001 \001"
    "(\0132\024.MTRpc.ServerOptions\">\n\025UpdateOption"
    "sResponse\022%\n\007options\030\001 \001(\0132\024.MTRpc.Serve"
    "rOptions\"\025\n\023ServerStatusRequest\"\264\001\n\024Serv"
    "erStatusResponse\022\024\n\014is_listening\030\001 \001(\010\022\030"
    "\n\020connection_count\030\002 \001(\003\022\025\n\rservice_coun"
    "t\030\003 \001(\003\022\035\n\025pending_message_count\030\004 \001(\003\022\033"
    "\n\023pending_buffer_size\030\005 \001(\003\022\031\n\021pending_d"
    "ata_size\030\006 \001(\003\"\024\n\022ListServiceRequest\"\\\n\023"
    "ListServiceResponse\022\020\n\010services\030\001 \003(\t\0223\n"
    "\005files\030\002 \003(\0132$.google.protobuf.FileDescr"
    "iptorProto\"\300\001\n\nMethodStat\022\023\n\013method_name"
    "\030\001 \001(\t\022\025\n\rsucceed_count\030\002 \001(\003\022\033\n\023succeed"
    "_avg_time_us\030\003 \001(\002\022\033\n\023succeed_max_time_u"
    "s\030\004 \001(\003\022\024\n\014failed_count\030\005 \001(\003\022\032\n\022failed_"
    "avg_time_us\030\006 \001(\002\022\032\n\022failed_max_time_us\030"
    "\007 \001(\003\"\221\001\n\013ServiceStat\022\024\n\014service_name\030\001 "
    "\001(\t\022\026\n\016period_seconds\030\002 \001(\003\022\025\n\rsucceed_c"
    "ount\030\003 \001(\003\022\024\n\014failed_count\030\004 \001(\003\022\'\n\014meth"
    "od_stats\030\005 \003(\0132\021.MTRpc.MethodStat\"D\n\013Sta"
    "tRequest\022\031\n\014service_name\030\001 \001(\t:\003all\022\032\n\016p"
    "eriod_seconds\030\002 \001(\003:\00260\"9\n\014StatResponse\022"
    ")\n\rservice_stats\030\001 \003(\0132\022.MTRpc.ServiceSt"
    "at2\254\003\n\016BuiltinService\0225\n\006Health\022\024.MTRpc."
    "HealthRequest\032\025.MTRpc.HealthResponse\022J\n\r"
    "ServerOptions\022\033.MTRpc.ServerOptionsReque"
    "st\032\034.MTRpc.ServerOptionsResponse\022J\n\rUpda"
    "teOptions\022\033.MTRpc.UpdateOptionsRequest\032\034"
    ".MTRpc.UpdateOptionsResponse\022G\n\014ServerSt"
    "atus\022\032.MTRpc.ServerStatusRequest\032\033.MTRpc"
    ".ServerStatusResponse\022J\n\013ListService\022\031.M"
    "TRpc.ListServiceRequest\032\032.MTRpc.ListServ"
    "iceResponse\"\004\220\342\t\001\022/\n\004Stat\022\022.MTRpc.StatRe"
    "quest\032\023.MTRpc.StatResponse\032\005\200\342\t\270\027B\003\200\001\001", 1798);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "builtin_service.proto", &protobuf_RegisterTypes);
  HealthRequest::default_instance_ = new HealthRequest();
  HealthResponse::default_instance_ = new HealthResponse();
  ServerOptions::default_instance_ = new ServerOptions();
  ServerOptionsRequest::default_instance_ = new ServerOptionsRequest();
  ServerOptionsResponse::default_instance_ = new ServerOptionsResponse();
  UpdateOptionsRequest::default_instance_ = new UpdateOptionsRequest();
  UpdateOptionsResponse::default_instance_ = new UpdateOptionsResponse();
  ServerStatusRequest::default_instance_ = new ServerStatusRequest();
  ServerStatusResponse::default_instance_ = new ServerStatusResponse();
  ListServiceRequest::default_instance_ = new ListServiceRequest();
  ListServiceResponse::default_instance_ = new ListServiceResponse();
  MethodStat::default_instance_ = new MethodStat();
  ServiceStat::default_instance_ = new ServiceStat();
  StatRequest::_default_service_name_ =
      new ::std::string("all", 3);
  StatRequest::default_instance_ = new StatRequest();
  StatResponse::default_instance_ = new StatResponse();
  HealthRequest::default_instance_->InitAsDefaultInstance();
  HealthResponse::default_instance_->InitAsDefaultInstance();
  ServerOptions::default_instance_->InitAsDefaultInstance();
  ServerOptionsRequest::default_instance_->InitAsDefaultInstance();
  ServerOptionsResponse::default_instance_->InitAsDefaultInstance();
  UpdateOptionsRequest::default_instance_->InitAsDefaultInstance();
  UpdateOptionsResponse::default_instance_->InitAsDefaultInstance();
  ServerStatusRequest::default_instance_->InitAsDefaultInstance();
  ServerStatusResponse::default_instance_->InitAsDefaultInstance();
  ListServiceRequest::default_instance_->InitAsDefaultInstance();
  ListServiceResponse::default_instance_->InitAsDefaultInstance();
  MethodStat::default_instance_->InitAsDefaultInstance();
  ServiceStat::default_instance_->InitAsDefaultInstance();
  StatRequest::default_instance_->InitAsDefaultInstance();
  StatResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_builtin_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_builtin_5fservice_2eproto {
  StaticDescriptorInitializer_builtin_5fservice_2eproto() {
    protobuf_AddDesc_builtin_5fservice_2eproto();
  }
} static_descriptor_initializer_builtin_5fservice_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HealthRequest::HealthRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HealthRequest::InitAsDefaultInstance() {
}

HealthRequest::HealthRequest(const HealthRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HealthRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HealthRequest::~HealthRequest() {
  SharedDtor();
}

void HealthRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HealthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HealthRequest_descriptor_;
}

const HealthRequest& HealthRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_builtin_5fservice_2eproto();
  return *default_instance_;
}

HealthRequest* HealthRequest::default_instance_ = NULL;

HealthRequest* HealthRequest::New() const {
  return new HealthRequest;
}

void HealthRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HealthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void HealthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HealthRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HealthRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HealthRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HealthRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HealthRequest::MergeFrom(const HealthRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HealthRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthRequest::CopyFrom(const HealthRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthRequest::IsInitialized() const {

  return true;
}

void HealthRequest::Swap(HealthRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HealthRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HealthRequest_descriptor_;
  metadata.reflection = HealthRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HealthResponse::kHealthFieldNumber;
#endif  // !_MSC_VER

HealthResponse::HealthResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HealthResponse::InitAsDefaultInstance() {
}

HealthResponse::HealthResponse(const HealthResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HealthResponse::SharedCtor() {
  _cached_size_ = 0;
  health_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HealthResponse::~HealthResponse() {
  SharedDtor();
}

void HealthResponse::SharedDtor() {
  if (health_ != &::google::protobuf::internal::kEmptyString) {
    delete health_;
  }
  if (this != default_instance_) {
  }
}

void HealthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HealthResponse_descriptor_;
}

const HealthResponse& HealthResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_builtin_5fservice_2eproto();
  return *default_instance_;
}

HealthResponse* HealthResponse::default_instance_ = NULL;

HealthResponse* HealthResponse::New() const {
  return new HealthResponse;
}

void HealthResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_health()) {
      if (health_ != &::google::protobuf::internal::kEmptyString) {
        health_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HealthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string health = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_health()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->health().data(), this->health().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HealthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string health = 1;
  if (has_health()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->health().data(), this->health().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->health(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HealthResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string health = 1;
  if (has_health()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->health().data(), this->health().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->health(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HealthResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string health = 1;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->health());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HealthResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HealthResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HealthResponse::MergeFrom(const HealthResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_health()) {
      set_health(from.health());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HealthResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthResponse::CopyFrom(const HealthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthResponse::IsInitialized() const {

  return true;
}

void HealthResponse::Swap(HealthResponse* other) {
  if (other != this) {
    std::swap(health_, other->health_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HealthResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HealthResponse_descriptor_;
  metadata.reflection = HealthResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerOptions::kWorkThreadNumFieldNumber;
const int ServerOptions::kKeepAliveTimeFieldNumber;
const int ServerOptions::kMaxPendingBufferSizeFieldNumber;
const int ServerOptions::kMaxThroughputInFieldNumber;
const int ServerOptions::kMaxThroughputOutFieldNumber;
const int ServerOptions::kDisableBuiltinServicesFieldNumber;
const int ServerOptions::kDisableListServiceFieldNumber;
#endif  // !_MSC_VER

ServerOptions::ServerOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerOptions::InitAsDefaultInstance() {
}

ServerOptions::ServerOptions(const ServerOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerOptions::SharedCtor() {
  _cached_size_ = 0;
  work_thread_num_ = GOOGLE_LONGLONG(0);
  keep_alive_time_ = GOOGLE_LONGLONG(0);
  max_pending_buffer_size_ = GOOGLE_LONGLONG(0);
  max_throughput_in_ = GOOGLE_LONGLONG(0);
  max_throughput_out_ = GOOGLE_LONGLONG(0);
  disable_builtin_services_ = false;
  disable_list_service_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerOptions::~ServerOptions() {
  SharedDtor();
}

void ServerOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerOptions_descriptor_;
}

const ServerOptions& ServerOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_builtin_5fservice_2eproto();
  return *default_instance_;
}

ServerOptions* ServerOptions::default_instance_ = NULL;

ServerOptions* ServerOptions::New() const {
  return new ServerOptions;
}

void ServerOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    work_thread_num_ = GOOGLE_LONGLONG(0);
    keep_alive_time_ = GOOGLE_LONGLONG(0);
    max_pending_buffer_size_ = GOOGLE_LONGLONG(0);
    max_throughput_in_ = GOOGLE_LONGLONG(0);
    max_throughput_out_ = GOOGLE_LONGLONG(0);
    disable_builtin_services_ = false;
    disable_list_service_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 work_thread_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &work_thread_num_)));
          set_has_work_thread_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_keep_alive_time;
        break;
      }

      // optional int64 keep_alive_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keep_alive_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &keep_alive_time_)));
          set_has_keep_alive_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_pending_buffer_size;
        break;
      }

      // optional int64 max_pending_buffer_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_pending_buffer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_pending_buffer_size_)));
          set_has_max_pending_buffer_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_throughput_in;
        break;
      }

      // optional int64 max_throughput_in = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_throughput_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_throughput_in_)));
          set_has_max_throughput_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_throughput_out;
        break;
      }

      // optional int64 max_throughput_out = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_throughput_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_throughput_out_)));
          set_has_max_throughput_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_disable_builtin_services;
        break;
      }

      // optional bool disable_builtin_services = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disable_builtin_services:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_builtin_services_)));
          set_has_disable_builtin_services();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_disable_list_service;
        break;
      }

      // optional bool disable_list_service = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disable_list_service:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_list_service_)));
          set_has_disable_list_service();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 work_thread_num = 1;
  if (has_work_thread_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->work_thread_num(), output);
  }

  // optional int64 keep_alive_time = 2;
  if (has_keep_alive_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->keep_alive_time(), output);
  }

  // optional int64 max_pending_buffer_size = 3;
  if (has_max_pending_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->max_pending_buffer_size(), output);
  }

  // optional int64 max_throughput_in = 4;
  if (has_max_throughput_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->max_throughput_in(), output);
  }

  // optional int64 max_throughput_out = 5;
  if (has_max_throughput_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->max_throughput_out(), output);
  }

  // optional bool disable_builtin_services = 6;
  if (has_disable_builtin_services()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->disable_builtin_services(), output);
  }

  // optional bool disable_list_service = 7;
  if (has_disable_list_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->disable_list_service(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 work_thread_num = 1;
  if (has_work_thread_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->work_thread_num(), target);
  }

  // optional int64 keep_alive_time = 2;
  if (has_keep_alive_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->keep_alive_time(), target);
  }

  // optional int64 max_pending_buffer_size = 3;
  if (has_max_pending_buffer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->max_pending_buffer_size(), target);
  }

  // optional int64 max_throughput_in = 4;
  if (has_max_throughput_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->max_throughput_in(), target);
  }

  // optional int64 max_throughput_out = 5;
  if (has_max_throughput_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->max_throughput_out(), target);
  }

  // optional bool disable_builtin_services = 6;
  if (has_disable_builtin_services()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->disable_builtin_services(), target);
  }

  // optional bool disable_list_service = 7;
  if (has_disable_list_service()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->disable_list_service(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 work_thread_num = 1;
    if (has_work_thread_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->work_thread_num());
    }

    // optional int64 keep_alive_time = 2;
    if (has_keep_alive_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->keep_alive_time());
    }

    // optional int64 max_pending_buffer_size = 3;
    if (has_max_pending_buffer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_pending_buffer_size());
    }

    // optional int64 max_throughput_in = 4;
    if (has_max_throughput_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_throughput_in());
    }

    // optional int64 max_throughput_out = 5;
    if (has_max_throughput_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_throughput_out());
    }

    // optional bool disable_builtin_services = 6;
    if (has_disable_builtin_services()) {
      total_size += 1 + 1;
    }

    // optional bool disable_list_service = 7;
    if (has_disable_list_service()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerOptions::MergeFrom(const ServerOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_work_thread_num()) {
      set_work_thread_num(from.work_thread_num());
    }
    if (from.has_keep_alive_time()) {
      set_keep_alive_time(from.keep_alive_time());
    }
    if (from.has_max_pending_buffer_size()) {
      set_max_pending_buffer_size(from.max_pending_buffer_size());
    }
    if (from.has_max_throughput_in()) {
      set_max_throughput_in(from.max_throughput_in());
    }
    if (from.has_max_throughput_out()) {
      set_max_throughput_out(from.max_throughput_out());
    }
    if (from.has_disable_builtin_services()) {
      set_disable_builtin_services(from.disable_builtin_services());
    }
    if (from.has_disable_list_service()) {
      set_disable_list_service(from.disable_list_service());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerOptions::CopyFrom(const ServerOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerOptions::IsInitialized() const {

  return true;
}

void ServerOptions::Swap(ServerOptions* other) {
  if (other != this) {
    std::swap(work_thread_num_, other->work_thread_num_);
    std::swap(keep_alive_time_, other->keep_alive_time_);
    std::swap(max_pending_buffer_size_, other->max_pending_buffer_size_);
    std::swap(max_throughput_in_, other->max_throughput_in_);
    std::swap(max_throughput_out_, other->max_throughput_out_);
    std::swap(disable_builtin_services_, other->disable_builtin_services_);
    std::swap(disable_list_service_, other->disable_list_service_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerOptions_descriptor_;
  metadata.reflection = ServerOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ServerOptionsRequest::ServerOptionsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerOptionsRequest::InitAsDefaultInstance() {
}

ServerOptionsRequest::ServerOptionsRequest(const ServerOptionsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerOptionsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerOptionsRequest::~ServerOptionsRequest() {
  SharedDtor();
}

void ServerOptionsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerOptionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerOptionsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerOptionsRequest_descriptor_;
}

const ServerOptionsRequest& ServerOptionsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_builtin_5fservice_2eproto();
  return *default_instance_;
}

ServerOptionsRequest* ServerOptionsRequest::default_instance_ = NULL;

ServerOptionsRequest* ServerOptionsRequest::New() const {
  return new ServerOptionsRequest;
}

void ServerOptionsRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerOptionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ServerOptionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerOptionsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerOptionsRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerOptionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerOptionsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerOptionsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerOptionsRequest::MergeFrom(const ServerOptionsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerOptionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerOptionsRequest::CopyFrom(const ServerOptionsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerOptionsRequest::IsInitialized() const {

  return true;
}

void ServerOptionsRequest::Swap(ServerOptionsRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerOptionsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerOptionsRequest_descriptor_;
  metadata.reflection = ServerOptionsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerOptionsResponse::kOptionsFieldNumber;
#endif  // !_MSC_VER

ServerOptionsResponse::ServerOptionsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerOptionsResponse::InitAsDefaultInstance() {
  options_ = const_cast< ::MTRpc::ServerOptions*>(&::MTRpc::ServerOptions::default_instance());
}

ServerOptionsResponse::ServerOptionsResponse(const ServerOptionsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerOptionsResponse::SharedCtor() {
  _cached_size_ = 0;
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerOptionsResponse::~ServerOptionsResponse() {
  SharedDtor();
}

void ServerOptionsResponse::SharedDtor() {
  if (this != default_instance_) {
    delete options_;
  }
}

void ServerOptionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerOptionsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerOptionsResponse_descriptor_;
}

const ServerOptionsResponse& ServerOptionsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_builtin_5fservice_2eproto();
  return *default_instance_;
}

ServerOptionsResponse* ServerOptionsResponse::default_instance_ = NULL;

ServerOptionsResponse* ServerOptionsResponse::New() const {
  return new ServerOptionsResponse;
}

void ServerOptionsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_options()) {
      if (options_ != NULL) options_->::MTRpc::ServerOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerOptionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MTRpc.ServerOptions options = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerOptionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MTRpc.ServerOptions options = 1;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerOptionsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MTRpc.ServerOptions options = 1;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerOptionsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MTRpc.ServerOptions options = 1;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerOptionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerOptionsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerOptionsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerOptionsResponse::MergeFrom(const ServerOptionsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_options()) {
      mutable_options()->::MTRpc::ServerOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerOptionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerOptionsResponse::CopyFrom(const ServerOptionsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerOptionsResponse::IsInitialized() const {

  return true;
}

void ServerOptionsResponse::Swap(ServerOptionsResponse* other) {
  if (other != this) {
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerOptionsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerOptionsResponse_descriptor_;
  metadata.reflection = ServerOptionsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateOptionsRequest::kOptionsFieldNumber;
#endif  // !_MSC_VER

UpdateOptionsRequest::UpdateOptionsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateOptionsRequest::InitAsDefaultInstance() {
  options_ = const_cast< ::MTRpc::ServerOptions*>(&::MTRpc::ServerOptions::default_instance());
}

UpdateOptionsRequest::UpdateOptionsRequest(const UpdateOptionsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateOptionsRequest::SharedCtor() {
  _cached_size_ = 0;
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateOptionsRequest::~UpdateOptionsRequest() {
  SharedDtor();
}

void UpdateOptionsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete options_;
  }
}

void UpdateOptionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateOptionsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateOptionsRequest_descriptor_;
}

const UpdateOptionsRequest& UpdateOptionsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_builtin_5fservice_2eproto();
  return *default_instance_;
}

UpdateOptionsRequest* UpdateOptionsRequest::default_instance_ = NULL;

UpdateOptionsRequest* UpdateOptionsRequest::New() const {
  return new UpdateOptionsRequest;
}

void UpdateOptionsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_options()) {
      if (options_ != NULL) options_->::MTRpc::ServerOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateOptionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MTRpc.ServerOptions options = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateOptionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MTRpc.ServerOptions options = 1;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateOptionsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MTRpc.ServerOptions options = 1;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateOptionsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MTRpc.ServerOptions options = 1;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateOptionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateOptionsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateOptionsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateOptionsRequest::MergeFrom(const UpdateOptionsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_options()) {
      mutable_options()->::MTRpc::ServerOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateOptionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateOptionsRequest::CopyFrom(const UpdateOptionsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateOptionsRequest::IsInitialized() const {

  return true;
}

void UpdateOptionsRequest::Swap(UpdateOptionsRequest* other) {
  if (other != this) {
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateOptionsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateOptionsRequest_descriptor_;
  metadata.reflection = UpdateOptionsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateOptionsResponse::kOptionsFieldNumber;
#endif  // !_MSC_VER

UpdateOptionsResponse::UpdateOptionsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateOptionsResponse::InitAsDefaultInstance() {
  options_ = const_cast< ::MTRpc::ServerOptions*>(&::MTRpc::ServerOptions::default_instance());
}

UpdateOptionsResponse::UpdateOptionsResponse(const UpdateOptionsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateOptionsResponse::SharedCtor() {
  _cached_size_ = 0;
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateOptionsResponse::~UpdateOptionsResponse() {
  SharedDtor();
}

void UpdateOptionsResponse::SharedDtor() {
  if (this != default_instance_) {
    delete options_;
  }
}

void UpdateOptionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateOptionsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateOptionsResponse_descriptor_;
}

const UpdateOptionsResponse& UpdateOptionsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_builtin_5fservice_2eproto();
  return *default_instance_;
}

UpdateOptionsResponse* UpdateOptionsResponse::default_instance_ = NULL;

UpdateOptionsResponse* UpdateOptionsResponse::New() const {
  return new UpdateOptionsResponse;
}

void UpdateOptionsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_options()) {
      if (options_ != NULL) options_->::MTRpc::ServerOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateOptionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MTRpc.ServerOptions options = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateOptionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MTRpc.ServerOptions options = 1;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateOptionsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MTRpc.ServerOptions options = 1;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateOptionsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MTRpc.ServerOptions options = 1;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateOptionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateOptionsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateOptionsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateOptionsResponse::MergeFrom(const UpdateOptionsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_options()) {
      mutable_options()->::MTRpc::ServerOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateOptionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateOptionsResponse::CopyFrom(const UpdateOptionsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateOptionsResponse::IsInitialized() const {

  return true;
}

void UpdateOptionsResponse::Swap(UpdateOptionsResponse* other) {
  if (other != this) {
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateOptionsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateOptionsResponse_descriptor_;
  metadata.reflection = UpdateOptionsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ServerStatusRequest::ServerStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerStatusRequest::InitAsDefaultInstance() {
}

ServerStatusRequest::ServerStatusRequest(const ServerStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStatusRequest::~ServerStatusRequest() {
  SharedDtor();
}

void ServerStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatusRequest_descriptor_;
}

const ServerStatusRequest& ServerStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_builtin_5fservice_2eproto();
  return *default_instance_;
}

ServerStatusRequest* ServerStatusRequest::default_instance_ = NULL;

ServerStatusRequest* ServerStatusRequest::New() const {
  return new ServerStatusRequest;
}

void ServerStatusRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ServerStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerStatusRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStatusRequest::MergeFrom(const ServerStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatusRequest::CopyFrom(const ServerStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatusRequest::IsInitialized() const {

  return true;
}

void ServerStatusRequest::Swap(ServerStatusRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStatusRequest_descriptor_;
  metadata.reflection = ServerStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerStatusResponse::kIsListeningFieldNumber;
const int ServerStatusResponse::kConnectionCountFieldNumber;
const int ServerStatusResponse::kServiceCountFieldNumber;
const int ServerStatusResponse::kPendingMessageCountFieldNumber;
const int ServerStatusResponse::kPendingBufferSizeFieldNumber;
const int ServerStatusResponse::kPendingDataSizeFieldNumber;
#endif  // !_MSC_VER

ServerStatusResponse::ServerStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerStatusResponse::InitAsDefaultInstance() {
}

ServerStatusResponse::ServerStatusResponse(const ServerStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  is_listening_ = false;
  connection_count_ = GOOGLE_LONGLONG(0);
  service_count_ = GOOGLE_LONGLONG(0);
  pending_message_count_ = GOOGLE_LONGLONG(0);
  pending_buffer_size_ = GOOGLE_LONGLONG(0);
  pending_data_size_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStatusResponse::~ServerStatusResponse() {
  SharedDtor();
}

void ServerStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatusResponse_descriptor_;
}

const ServerStatusResponse& ServerStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_builtin_5fservice_2eproto();
  return *default_instance_;
}

ServerStatusResponse* ServerStatusResponse::default_instance_ = NULL;

ServerStatusResponse* ServerStatusResponse::New() const {
  return new ServerStatusResponse;
}

void ServerStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_listening_ = false;
    connection_count_ = GOOGLE_LONGLONG(0);
    service_count_ = GOOGLE_LONGLONG(0);
    pending_message_count_ = GOOGLE_LONGLONG(0);
    pending_buffer_size_ = GOOGLE_LONGLONG(0);
    pending_data_size_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_listening = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_listening_)));
          set_has_is_listening();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_connection_count;
        break;
      }

      // optional int64 connection_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connection_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &connection_count_)));
          set_has_connection_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_service_count;
        break;
      }

      // optional int64 service_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &service_count_)));
          set_has_service_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pending_message_count;
        break;
      }

      // optional int64 pending_message_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pending_message_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pending_message_count_)));
          set_has_pending_message_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pending_buffer_size;
        break;
      }

      // optional int64 pending_buffer_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pending_buffer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pending_buffer_size_)));
          set_has_pending_buffer_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pending_data_size;
        break;
      }

      // optional int64 pending_data_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pending_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pending_data_size_)));
          set_has_pending_data_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_listening = 1;
  if (has_is_listening()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_listening(), output);
  }

  // optional int64 connection_count = 2;
  if (has_connection_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->connection_count(), output);
  }

  // optional int64 service_count = 3;
  if (has_service_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->service_count(), output);
  }

  // optional int64 pending_message_count = 4;
  if (has_pending_message_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->pending_message_count(), output);
  }

  // optional int64 pending_buffer_size = 5;
  if (has_pending_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->pending_buffer_size(), output);
  }

  // optional int64 pending_data_size = 6;
  if (has_pending_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->pending_data_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_listening = 1;
  if (has_is_listening()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_listening(), target);
  }

  // optional int64 connection_count = 2;
  if (has_connection_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->connection_count(), target);
  }

  // optional int64 service_count = 3;
  if (has_service_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->service_count(), target);
  }

  // optional int64 pending_message_count = 4;
  if (has_pending_message_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->pending_message_count(), target);
  }

  // optional int64 pending_buffer_size = 5;
  if (has_pending_buffer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->pending_buffer_size(), target);
  }

  // optional int64 pending_data_size = 6;
  if (has_pending_data_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->pending_data_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerStatusResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_listening = 1;
    if (has_is_listening()) {
      total_size += 1 + 1;
    }

    // optional int64 connection_count = 2;
    if (has_connection_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->connection_count());
    }

    // optional int64 service_count = 3;
    if (has_service_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->service_count());
    }

    // optional int64 pending_message_count = 4;
    if (has_pending_message_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pending_message_count());
    }

    // optional int64 pending_buffer_size = 5;
    if (has_pending_buffer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pending_buffer_size());
    }

    // optional int64 pending_data_size = 6;
    if (has_pending_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pending_data_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStatusResponse::MergeFrom(const ServerStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_listening()) {
      set_is_listening(from.is_listening());
    }
    if (from.has_connection_count()) {
      set_connection_count(from.connection_count());
    }
    if (from.has_service_count()) {
      set_service_count(from.service_count());
    }
    if (from.has_pending_message_count()) {
      set_pending_message_count(from.pending_message_count());
    }
    if (from.has_pending_buffer_size()) {
      set_pending_buffer_size(from.pending_buffer_size());
    }
    if (from.has_pending_data_size()) {
      set_pending_data_size(from.pending_data_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatusResponse::CopyFrom(const ServerStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatusResponse::IsInitialized() const {

  return true;
}

void ServerStatusResponse::Swap(ServerStatusResponse* other) {
  if (other != this) {
    std::swap(is_listening_, other->is_listening_);
    std::swap(connection_count_, other->connection_count_);
    std::swap(service_count_, other->service_count_);
    std::swap(pending_message_count_, other->pending_message_count_);
    std::swap(pending_buffer_size_, other->pending_buffer_size_);
    std::swap(pending_data_size_, other->pending_data_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStatusResponse_descriptor_;
  metadata.reflection = ServerStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ListServiceRequest::ListServiceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListServiceRequest::InitAsDefaultInstance() {
}

ListServiceRequest::ListServiceRequest(const ListServiceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListServiceRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListServiceRequest::~ListServiceRequest() {
  SharedDtor();
}

void ListServiceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListServiceRequest_descriptor_;
}

const ListServiceRequest& ListServiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_builtin_5fservice_2eproto();
  return *default_instance_;
}

ListServiceRequest* ListServiceRequest::default_instance_ = NULL;

ListServiceRequest* ListServiceRequest::New() const {
  return new ListServiceRequest;
}

void ListServiceRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ListServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListServiceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListServiceRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListServiceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListServiceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListServiceRequest::MergeFrom(const ListServiceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListServiceRequest::CopyFrom(const ListServiceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListServiceRequest::IsInitialized() const {

  return true;
}

void ListServiceRequest::Swap(ListServiceRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListServiceRequest_descriptor_;
  metadata.reflection = ListServiceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListServiceResponse::kServicesFieldNumber;
const int ListServiceResponse::kFilesFieldNumber;
#endif  // !_MSC_VER

ListServiceResponse::ListServiceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListServiceResponse::InitAsDefaultInstance() {
}

ListServiceResponse::ListServiceResponse(const ListServiceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListServiceResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListServiceResponse::~ListServiceResponse() {
  SharedDtor();
}

void ListServiceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListServiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListServiceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListServiceResponse_descriptor_;
}

const ListServiceResponse& ListServiceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_builtin_5fservice_2eproto();
  return *default_instance_;
}

ListServiceResponse* ListServiceResponse::default_instance_ = NULL;

ListServiceResponse* ListServiceResponse::New() const {
  return new ListServiceResponse;
}

void ListServiceResponse::Clear() {
  services_.Clear();
  files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListServiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string services = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_services:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_services()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->services(this->services_size() - 1).data(),
            this->services(this->services_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_services;
        if (input->ExpectTag(18)) goto parse_files;
        break;
      }

      // repeated .google.protobuf.FileDescriptorProto files = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_files;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListServiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string services = 1;
  for (int i = 0; i < this->services_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->services(i).data(), this->services(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->services(i), output);
  }

  // repeated .google.protobuf.FileDescriptorProto files = 2;
  for (int i = 0; i < this->files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->files(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListServiceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string services = 1;
  for (int i = 0; i < this->services_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->services(i).data(), this->services(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->services(i), target);
  }

  // repeated .google.protobuf.FileDescriptorProto files = 2;
  for (int i = 0; i < this->files_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->files(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListServiceResponse::ByteSize() const {
  int total_size = 0;

  // repeated string services = 1;
  total_size += 1 * this->services_size();
  for (int i = 0; i < this->services_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->services(i));
  }

  // repeated .google.protobuf.FileDescriptorProto files = 2;
  total_size += 1 * this->files_size();
  for (int i = 0; i < this->files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->files(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListServiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListServiceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListServiceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListServiceResponse::MergeFrom(const ListServiceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  services_.MergeFrom(from.services_);
  files_.MergeFrom(from.files_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListServiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListServiceResponse::CopyFrom(const ListServiceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListServiceResponse::IsInitialized() const {

  for (int i = 0; i < files_size(); i++) {
    if (!this->files(i).IsInitialized()) return false;
  }
  return true;
}

void ListServiceResponse::Swap(ListServiceResponse* other) {
  if (other != this) {
    services_.Swap(&other->services_);
    files_.Swap(&other->files_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListServiceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListServiceResponse_descriptor_;
  metadata.reflection = ListServiceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MethodStat::kMethodNameFieldNumber;
const int MethodStat::kSucceedCountFieldNumber;
const int MethodStat::kSucceedAvgTimeUsFieldNumber;
const int MethodStat::kSucceedMaxTimeUsFieldNumber;
const int MethodStat::kFailedCountFieldNumber;
const int MethodStat::kFailedAvgTimeUsFieldNumber;
const int MethodStat::kFailedMaxTimeUsFieldNumber;
#endif  // !_MSC_VER

MethodStat::MethodStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MethodStat::InitAsDefaultInstance() {
}

MethodStat::MethodStat(const MethodStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MethodStat::SharedCtor() {
  _cached_size_ = 0;
  method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  succeed_count_ = GOOGLE_LONGLONG(0);
  succeed_avg_time_us_ = 0;
  succeed_max_time_us_ = GOOGLE_LONGLONG(0);
  failed_count_ = GOOGLE_LONGLONG(0);
  failed_avg_time_us_ = 0;
  failed_max_time_us_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MethodStat::~MethodStat() {
  SharedDtor();
}

void MethodStat::SharedDtor() {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    delete method_name_;
  }
  if (this != default_instance_) {
  }
}

void MethodStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MethodStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MethodStat_descriptor_;
}

const MethodStat& MethodStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_builtin_5fservice_2eproto();
  return *default_instance_;
}

MethodStat* MethodStat::default_instance_ = NULL;

MethodStat* MethodStat::New() const {
  return new MethodStat;
}

void MethodStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_method_name()) {
      if (method_name_ != &::google::protobuf::internal::kEmptyString) {
        method_name_->clear();
      }
    }
    succeed_count_ = GOOGLE_LONGLONG(0);
    succeed_avg_time_us_ = 0;
    succeed_max_time_us_ = GOOGLE_LONGLONG(0);
    failed_count_ = GOOGLE_LONGLONG(0);
    failed_avg_time_us_ = 0;
    failed_max_time_us_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MethodStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string method_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_succeed_count;
        break;
      }

      // optional int64 succeed_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_succeed_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &succeed_count_)));
          set_has_succeed_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_succeed_avg_time_us;
        break;
      }

      // optional float succeed_avg_time_us = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_succeed_avg_time_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &succeed_avg_time_us_)));
          set_has_succeed_avg_time_us();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_succeed_max_time_us;
        break;
      }

      // optional int64 succeed_max_time_us = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_succeed_max_time_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &succeed_max_time_us_)));
          set_has_succeed_max_time_us();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_failed_count;
        break;
      }

      // optional int64 failed_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &failed_count_)));
          set_has_failed_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_failed_avg_time_us;
        break;
      }

      // optional float failed_avg_time_us = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_failed_avg_time_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &failed_avg_time_us_)));
          set_has_failed_avg_time_us();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_failed_max_time_us;
        break;
      }

      // optional int64 failed_max_time_us = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed_max_time_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &failed_max_time_us_)));
          set_has_failed_max_time_us();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MethodStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string method_name = 1;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->method_name(), output);
  }

  // optional int64 succeed_count = 2;
  if (has_succeed_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->succeed_count(), output);
  }

  // optional float succeed_avg_time_us = 3;
  if (has_succeed_avg_time_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->succeed_avg_time_us(), output);
  }

  // optional int64 succeed_max_time_us = 4;
  if (has_succeed_max_time_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->succeed_max_time_us(), output);
  }

  // optional int64 failed_count = 5;
  if (has_failed_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->failed_count(), output);
  }

  // optional float failed_avg_time_us = 6;
  if (has_failed_avg_time_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->failed_avg_time_us(), output);
  }

  // optional int64 failed_max_time_us = 7;
  if (has_failed_max_time_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->failed_max_time_us(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MethodStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string method_name = 1;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->method_name(), target);
  }

  // optional int64 succeed_count = 2;
  if (has_succeed_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->succeed_count(), target);
  }

  // optional float succeed_avg_time_us = 3;
  if (has_succeed_avg_time_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->succeed_avg_time_us(), target);
  }

  // optional int64 succeed_max_time_us = 4;
  if (has_succeed_max_time_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->succeed_max_time_us(), target);
  }

  // optional int64 failed_count = 5;
  if (has_failed_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->failed_count(), target);
  }

  // optional float failed_avg_time_us = 6;
  if (has_failed_avg_time_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->failed_avg_time_us(), target);
  }

  // optional int64 failed_max_time_us = 7;
  if (has_failed_max_time_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->failed_max_time_us(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MethodStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string method_name = 1;
    if (has_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }

    // optional int64 succeed_count = 2;
    if (has_succeed_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->succeed_count());
    }

    // optional float succeed_avg_time_us = 3;
    if (has_succeed_avg_time_us()) {
      total_size += 1 + 4;
    }

    // optional int64 succeed_max_time_us = 4;
    if (has_succeed_max_time_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->succeed_max_time_us());
    }

    // optional int64 failed_count = 5;
    if (has_failed_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->failed_count());
    }

    // optional float failed_avg_time_us = 6;
    if (has_failed_avg_time_us()) {
      total_size += 1 + 4;
    }

    // optional int64 failed_max_time_us = 7;
    if (has_failed_max_time_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->failed_max_time_us());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MethodStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MethodStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MethodStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MethodStat::MergeFrom(const MethodStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method_name()) {
      set_method_name(from.method_name());
    }
    if (from.has_succeed_count()) {
      set_succeed_count(from.succeed_count());
    }
    if (from.has_succeed_avg_time_us()) {
      set_succeed_avg_time_us(from.succeed_avg_time_us());
    }
    if (from.has_succeed_max_time_us()) {
      set_succeed_max_time_us(from.succeed_max_time_us());
    }
    if (from.has_failed_count()) {
      set_failed_count(from.failed_count());
    }
    if (from.has_failed_avg_time_us()) {
      set_failed_avg_time_us(from.failed_avg_time_us());
    }
    if (from.has_failed_max_time_us()) {
      set_failed_max_time_us(from.failed_max_time_us());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MethodStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MethodStat::CopyFrom(const MethodStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MethodStat::IsInitialized() const {

  return true;
}

void MethodStat::Swap(MethodStat* other) {
  if (other != this) {
    std::swap(method_name_, other->method_name_);
    std::swap(succeed_count_, other->succeed_count_);
    std::swap(succeed_avg_time_us_, other->succeed_avg_time_us_);
    std::swap(succeed_max_time_us_, other->succeed_max_time_us_);
    std::swap(failed_count_, other->failed_count_);
    std::swap(failed_avg_time_us_, other->failed_avg_time_us_);
    std::swap(failed_max_time_us_, other->failed_max_time_us_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MethodStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MethodStat_descriptor_;
  metadata.reflection = MethodStat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceStat::kServiceNameFieldNumber;
const int ServiceStat::kPeriodSecondsFieldNumber;
const int ServiceStat::kSucceedCountFieldNumber;
const int ServiceStat::kFailedCountFieldNumber;
const int ServiceStat::kMethodStatsFieldNumber;
#endif  // !_MSC_VER

ServiceStat::ServiceStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceStat::InitAsDefaultInstance() {
}

ServiceStat::ServiceStat(const ServiceStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceStat::SharedCtor() {
  _cached_size_ = 0;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  period_seconds_ = GOOGLE_LONGLONG(0);
  succeed_count_ = GOOGLE_LONGLONG(0);
  failed_count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceStat::~ServiceStat() {
  SharedDtor();
}

void ServiceStat::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    delete service_name_;
  }
  if (this != default_instance_) {
  }
}

void ServiceStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceStat_descriptor_;
}

const ServiceStat& ServiceStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_builtin_5fservice_2eproto();
  return *default_instance_;
}

ServiceStat* ServiceStat::default_instance_ = NULL;

ServiceStat* ServiceStat::New() const {
  return new ServiceStat;
}

void ServiceStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::kEmptyString) {
        service_name_->clear();
      }
    }
    period_seconds_ = GOOGLE_LONGLONG(0);
    succeed_count_ = GOOGLE_LONGLONG(0);
    failed_count_ = GOOGLE_LONGLONG(0);
  }
  method_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_period_seconds;
        break;
      }

      // optional int64 period_seconds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &period_seconds_)));
          set_has_period_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_succeed_count;
        break;
      }

      // optional int64 succeed_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_succeed_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &succeed_count_)));
          set_has_succeed_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_failed_count;
        break;
      }

      // optional int64 failed_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &failed_count_)));
          set_has_failed_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_method_stats;
        break;
      }

      // repeated .MTRpc.MethodStat method_stats = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_method_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_method_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_method_stats;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_name(), output);
  }

  // optional int64 period_seconds = 2;
  if (has_period_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->period_seconds(), output);
  }

  // optional int64 succeed_count = 3;
  if (has_succeed_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->succeed_count(), output);
  }

  // optional int64 failed_count = 4;
  if (has_failed_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->failed_count(), output);
  }

  // repeated .MTRpc.MethodStat method_stats = 5;
  for (int i = 0; i < this->method_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->method_stats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // optional int64 period_seconds = 2;
  if (has_period_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->period_seconds(), target);
  }

  // optional int64 succeed_count = 3;
  if (has_succeed_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->succeed_count(), target);
  }

  // optional int64 failed_count = 4;
  if (has_failed_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->failed_count(), target);
  }

  // repeated .MTRpc.MethodStat method_stats = 5;
  for (int i = 0; i < this->method_stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->method_stats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string service_name = 1;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

    // optional int64 period_seconds = 2;
    if (has_period_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->period_seconds());
    }

    // optional int64 succeed_count = 3;
    if (has_succeed_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->succeed_count());
    }

    // optional int64 failed_count = 4;
    if (has_failed_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->failed_count());
    }

  }
  // repeated .MTRpc.MethodStat method_stats = 5;
  total_size += 1 * this->method_stats_size();
  for (int i = 0; i < this->method_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->method_stats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceStat::MergeFrom(const ServiceStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  method_stats_.MergeFrom(from.method_stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_period_seconds()) {
      set_period_seconds(from.period_seconds());
    }
    if (from.has_succeed_count()) {
      set_succeed_count(from.succeed_count());
    }
    if (from.has_failed_count()) {
      set_failed_count(from.failed_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceStat::CopyFrom(const ServiceStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceStat::IsInitialized() const {

  return true;
}

void ServiceStat::Swap(ServiceStat* other) {
  if (other != this) {
    std::swap(service_name_, other->service_name_);
    std::swap(period_seconds_, other->period_seconds_);
    std::swap(succeed_count_, other->succeed_count_);
    std::swap(failed_count_, other->failed_count_);
    method_stats_.Swap(&other->method_stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceStat_descriptor_;
  metadata.reflection = ServiceStat_reflection_;
  return metadata;
}


// ===================================================================

::std::string* StatRequest::_default_service_name_ = NULL;
#ifndef _MSC_VER
const int StatRequest::kServiceNameFieldNumber;
const int StatRequest::kPeriodSecondsFieldNumber;
#endif  // !_MSC_VER

StatRequest::StatRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatRequest::InitAsDefaultInstance() {
}

StatRequest::StatRequest(const StatRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatRequest::SharedCtor() {
  _cached_size_ = 0;
  service_name_ = const_cast< ::std::string*>(_default_service_name_);
  period_seconds_ = GOOGLE_LONGLONG(60);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatRequest::~StatRequest() {
  SharedDtor();
}

void StatRequest::SharedDtor() {
  if (service_name_ != _default_service_name_) {
    delete service_name_;
  }
  if (this != default_instance_) {
  }
}

void StatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatRequest_descriptor_;
}

const StatRequest& StatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_builtin_5fservice_2eproto();
  return *default_instance_;
}

StatRequest* StatRequest::default_instance_ = NULL;

StatRequest* StatRequest::New() const {
  return new StatRequest;
}

void StatRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_name()) {
      if (service_name_ != _default_service_name_) {
        service_name_->assign(*_default_service_name_);
      }
    }
    period_seconds_ = GOOGLE_LONGLONG(60);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_name = 1 [default = "all"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_period_seconds;
        break;
      }

      // optional int64 period_seconds = 2 [default = 60];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &period_seconds_)));
          set_has_period_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string service_name = 1 [default = "all"];
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_name(), output);
  }

  // optional int64 period_seconds = 2 [default = 60];
  if (has_period_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->period_seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string service_name = 1 [default = "all"];
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // optional int64 period_seconds = 2 [default = 60];
  if (has_period_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->period_seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string service_name = 1 [default = "all"];
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

    // optional int64 period_seconds = 2 [default = 60];
    if (has_period_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->period_seconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatRequest::MergeFrom(const StatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_period_seconds()) {
      set_period_seconds(from.period_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatRequest::CopyFrom(const StatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatRequest::IsInitialized() const {

  return true;
}

void StatRequest::Swap(StatRequest* other) {
  if (other != this) {
    std::swap(service_name_, other->service_name_);
    std::swap(period_seconds_, other->period_seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatRequest_descriptor_;
  metadata.reflection = StatRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatResponse::kServiceStatsFieldNumber;
#endif  // !_MSC_VER

StatResponse::StatResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatResponse::InitAsDefaultInstance() {
}

StatResponse::StatResponse(const StatResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatResponse::~StatResponse() {
  SharedDtor();
}

void StatResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatResponse_descriptor_;
}

const StatResponse& StatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_builtin_5fservice_2eproto();
  return *default_instance_;
}

StatResponse* StatResponse::default_instance_ = NULL;

StatResponse* StatResponse::New() const {
  return new StatResponse;
}

void StatResponse::Clear() {
  service_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MTRpc.ServiceStat service_stats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_service_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_service_stats;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MTRpc.ServiceStat service_stats = 1;
  for (int i = 0; i < this->service_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->service_stats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MTRpc.ServiceStat service_stats = 1;
  for (int i = 0; i < this->service_stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->service_stats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatResponse::ByteSize() const {
  int total_size = 0;

  // repeated .MTRpc.ServiceStat service_stats = 1;
  total_size += 1 * this->service_stats_size();
  for (int i = 0; i < this->service_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->service_stats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatResponse::MergeFrom(const StatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  service_stats_.MergeFrom(from.service_stats_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatResponse::CopyFrom(const StatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatResponse::IsInitialized() const {

  return true;
}

void StatResponse::Swap(StatResponse* other) {
  if (other != this) {
    service_stats_.Swap(&other->service_stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatResponse_descriptor_;
  metadata.reflection = StatResponse_reflection_;
  return metadata;
}


// ===================================================================

BuiltinService::~BuiltinService() {}

const ::google::protobuf::ServiceDescriptor* BuiltinService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuiltinService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* BuiltinService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuiltinService_descriptor_;
}

void BuiltinService::Health(::google::protobuf::RpcController* controller,
                         const ::MTRpc::HealthRequest*,
                         ::MTRpc::HealthResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Health() not implemented.");
  done->Run();
}

void BuiltinService::ServerOptions(::google::protobuf::RpcController* controller,
                         const ::MTRpc::ServerOptionsRequest*,
                         ::MTRpc::ServerOptionsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ServerOptions() not implemented.");
  done->Run();
}

void BuiltinService::UpdateOptions(::google::protobuf::RpcController* controller,
                         const ::MTRpc::UpdateOptionsRequest*,
                         ::MTRpc::UpdateOptionsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateOptions() not implemented.");
  done->Run();
}

void BuiltinService::ServerStatus(::google::protobuf::RpcController* controller,
                         const ::MTRpc::ServerStatusRequest*,
                         ::MTRpc::ServerStatusResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ServerStatus() not implemented.");
  done->Run();
}

void BuiltinService::ListService(::google::protobuf::RpcController* controller,
                         const ::MTRpc::ListServiceRequest*,
                         ::MTRpc::ListServiceResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ListService() not implemented.");
  done->Run();
}

void BuiltinService::Stat(::google::protobuf::RpcController* controller,
                         const ::MTRpc::StatRequest*,
                         ::MTRpc::StatResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Stat() not implemented.");
  done->Run();
}

void BuiltinService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), BuiltinService_descriptor_);
  switch(method->index()) {
    case 0:
      Health(controller,
             ::google::protobuf::down_cast<const ::MTRpc::HealthRequest*>(request),
             ::google::protobuf::down_cast< ::MTRpc::HealthResponse*>(response),
             done);
      break;
    case 1:
      ServerOptions(controller,
             ::google::protobuf::down_cast<const ::MTRpc::ServerOptionsRequest*>(request),
             ::google::protobuf::down_cast< ::MTRpc::ServerOptionsResponse*>(response),
             done);
      break;
    case 2:
      UpdateOptions(controller,
             ::google::protobuf::down_cast<const ::MTRpc::UpdateOptionsRequest*>(request),
             ::google::protobuf::down_cast< ::MTRpc::UpdateOptionsResponse*>(response),
             done);
      break;
    case 3:
      ServerStatus(controller,
             ::google::protobuf::down_cast<const ::MTRpc::ServerStatusRequest*>(request),
             ::google::protobuf::down_cast< ::MTRpc::ServerStatusResponse*>(response),
             done);
      break;
    case 4:
      ListService(controller,
             ::google::protobuf::down_cast<const ::MTRpc::ListServiceRequest*>(request),
             ::google::protobuf::down_cast< ::MTRpc::ListServiceResponse*>(response),
             done);
      break;
    case 5:
      Stat(controller,
             ::google::protobuf::down_cast<const ::MTRpc::StatRequest*>(request),
             ::google::protobuf::down_cast< ::MTRpc::StatResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& BuiltinService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::MTRpc::HealthRequest::default_instance();
    case 1:
      return ::MTRpc::ServerOptionsRequest::default_instance();
    case 2:
      return ::MTRpc::UpdateOptionsRequest::default_instance();
    case 3:
      return ::MTRpc::ServerStatusRequest::default_instance();
    case 4:
      return ::MTRpc::ListServiceRequest::default_instance();
    case 5:
      return ::MTRpc::StatRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& BuiltinService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::MTRpc::HealthResponse::default_instance();
    case 1:
      return ::MTRpc::ServerOptionsResponse::default_instance();
    case 2:
      return ::MTRpc::UpdateOptionsResponse::default_instance();
    case 3:
      return ::MTRpc::ServerStatusResponse::default_instance();
    case 4:
      return ::MTRpc::ListServiceResponse::default_instance();
    case 5:
      return ::MTRpc::StatResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

BuiltinService_Stub::BuiltinService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
BuiltinService_Stub::BuiltinService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
BuiltinService_Stub::~BuiltinService_Stub() {
  if (owns_channel_) delete channel_;
}

void BuiltinService_Stub::Health(::google::protobuf::RpcController* controller,
                              const ::MTRpc::HealthRequest* request,
                              ::MTRpc::HealthResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void BuiltinService_Stub::ServerOptions(::google::protobuf::RpcController* controller,
                              const ::MTRpc::ServerOptionsRequest* request,
                              ::MTRpc::ServerOptionsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void BuiltinService_Stub::UpdateOptions(::google::protobuf::RpcController* controller,
                              const ::MTRpc::UpdateOptionsRequest* request,
                              ::MTRpc::UpdateOptionsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void BuiltinService_Stub::ServerStatus(::google::protobuf::RpcController* controller,
                              const ::MTRpc::ServerStatusRequest* request,
                              ::MTRpc::ServerStatusResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void BuiltinService_Stub::ListService(::google::protobuf::RpcController* controller,
                              const ::MTRpc::ListServiceRequest* request,
                              ::MTRpc::ListServiceResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void BuiltinService_Stub::Stat(::google::protobuf::RpcController* controller,
                              const ::MTRpc::StatRequest* request,
                              ::MTRpc::StatResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace MTRpc

// @@protoc_insertion_point(global_scope)
